.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PT-HEARTBEAT 1p"
.TH PT-HEARTBEAT 1p "2016-03-07" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pt\-heartbeat \- Monitor MySQL replication delay.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage: pt-heartbeat [\s-1OPTIONS\s0] [\s-1DSN\s0] \-\-update|\-\-monitor|\-\-check|\-\-stop
.PP
pt-heartbeat measures replication lag on a MySQL or PostgreSQL server.  You can
use it to update a master or monitor a replica.  If possible, MySQL connection
options are read from your .my.cnf file.
.PP
Start daemonized process to update test.heartbeat table on master:
.PP
.Vb 1
\&  pt\-heartbeat \-D test \-\-update \-h master\-server \-\-daemonize
.Ve
.PP
Monitor replication lag on slave:
.PP
.Vb 1
\&  pt\-heartbeat \-D test \-\-monitor \-h slave\-server
\&
\&  pt\-heartbeat \-D test \-\-monitor \-h slave\-server \-\-dbi\-driver Pg
.Ve
.PP
Check slave lag once and exit (using optional \s-1DSN\s0 to specify slave host):
.PP
.Vb 1
\&  pt\-heartbeat \-D test \-\-check h=slave\-server
.Ve
.SH "RISKS"
.IX Header "RISKS"
Percona Toolkit is mature, proven in the real world, and well tested,
but all database tools can pose a risk to the system and the database
server.  Before using this tool, please:
.IP "\(bu" 4
Read the tool's documentation
.IP "\(bu" 4
Review the tool's known \*(L"\s-1BUGS\*(R"\s0
.IP "\(bu" 4
Test the tool on a non-production server
.IP "\(bu" 4
Backup your production server and verify the backups
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
pt-heartbeat is a two-part MySQL and PostgreSQL replication delay monitoring
system that measures delay by looking at actual replicated data.  This
avoids reliance on the replication mechanism itself, which is unreliable.  (For
example, \f(CW\*(C`SHOW SLAVE STATUS\*(C'\fR on MySQL).
.PP
The first part is an \*(L"\-\-update\*(R" instance of pt-heartbeat that connects to
a master and updates a timestamp (\*(L"heartbeat record\*(R") every \*(L"\-\-interval\*(R"
seconds.  Since the heartbeat table may contain records from multiple
masters (see \*(L"MULTI-SLAVE \s-1HIERARCHY\*(R"\s0), the server's \s-1ID\s0 (@@server_id) is
used to identify records.
.PP
The second part is a \*(L"\-\-monitor\*(R" or \*(L"\-\-check\*(R" instance of pt-heartbeat
that connects to a slave, examines the replicated heartbeat record from its
immediate master or the specified \*(L"\-\-master\-server\-id\*(R", and computes the
difference from the current system time.  If replication between the slave and
the master is delayed or broken, the computed difference will be greater than
zero and potentially increase if \*(L"\-\-monitor\*(R" is specified.
.PP
You must either manually create the heartbeat table on the master or use
\&\*(L"\-\-create\-table\*(R".  See \*(L"\-\-create\-table\*(R" for the proper heartbeat
table structure.  The \f(CW\*(C`MEMORY\*(C'\fR storage engine is suggested, but not
required of course, for MySQL.
.PP
The heartbeat table must contain a heartbeat row.  By default, a heartbeat
row is inserted if it doesn't exist.  This feature can be disabled with the
\&\*(L"\-\-[no]insert\-heartbeat\-row\*(R" option in case the database user does not
have \s-1INSERT\s0 privileges.
.PP
pt-heartbeat depends only on the heartbeat record being replicated to the slave,
so it works regardless of the replication mechanism (built-in replication, a
system such as Continuent Tungsten, etc).  It works at any depth in the
replication hierarchy; for example, it will reliably report how far a slave lags
its master's master's master.  And if replication is stopped, it will continue
to work and report (accurately!) that the slave is falling further and further
behind the master.
.PP
pt-heartbeat has a maximum resolution of 0.01 second.  The clocks on the
master and slave servers must be closely synchronized via \s-1NTP.\s0  By default,
\&\*(L"\-\-update\*(R" checks happen on the edge of the second (e.g. 00:01) and
\&\*(L"\-\-monitor\*(R" checks happen halfway between seconds (e.g. 00:01.5).
As long as the servers' clocks are closely synchronized and replication
events are propagating in less than half a second, pt-heartbeat will report
zero seconds of delay.
.PP
pt-heartbeat will try to reconnect if the connection has an error, but will
not retry if it can't get a connection when it first starts.
.PP
The \*(L"\-\-dbi\-driver\*(R" option lets you use pt-heartbeat to monitor PostgreSQL
as well.  It is reported to work well with Slony\-1 replication.
.SH "MULTI-SLAVE HIERARCHY"
.IX Header "MULTI-SLAVE HIERARCHY"
If the replication hierarchy has multiple slaves which are masters of
other slaves, like \*(L"master \-> slave1 \-> slave2\*(R", \*(L"\-\-update\*(R" instances
can be ran on the slaves as well as the master.  The default heartbeat
table (see \*(L"\-\-create\-table\*(R") is keyed on the \f(CW\*(C`server_id\*(C'\fR column, so
each server will update the row where \f(CW\*(C`server_id=@@server_id\*(C'\fR.
.PP
For \*(L"\-\-monitor\*(R" and \*(L"\-\-check\*(R", if \*(L"\-\-master\-server\-id\*(R" is not
specified, the tool tries to discover and use the slave's immediate master.
If this fails, or if you want monitor lag from another master, then you can
specify the \*(L"\-\-master\-server\-id\*(R" to use.
.PP
For example, if the replication hierarchy is \*(L"master \-> slave1 \-> slave2\*(R"
with corresponding server IDs 1, 2 and 3, you can:
.PP
.Vb 2
\&  pt\-heartbeat \-\-daemonize \-D test \-\-update \-h master 
\&  pt\-heartbeat \-\-daemonize \-D test \-\-update \-h slave1
.Ve
.PP
Then check (or monitor) the replication delay from master to slave2:
.PP
.Vb 1
\&  pt\-heartbeat \-D test \-\-master\-server\-id 1 \-\-check slave2
.Ve
.PP
Or check the replication delay from slave1 to slave2:
.PP
.Vb 1
\&  pt\-heartbeat \-D test \-\-master\-server\-id 2 \-\-check slave2
.Ve
.PP
Stopping the \*(L"\-\-update\*(R" instance one slave1 will not affect the instance
on master.
.SH "MASTER AND SLAVE STATUS"
.IX Header "MASTER AND SLAVE STATUS"
The default heartbeat table (see \*(L"\-\-create\-table\*(R") has columns for saving
information from \f(CW\*(C`SHOW MASTER STATUS\*(C'\fR and \f(CW\*(C`SHOW SLAVE STATUS\*(C'\fR.  These
columns are optional.  If any are present, their corresponding information
will be saved.
.SH "Percona XtraDB Cluster"
.IX Header "Percona XtraDB Cluster"
Although pt-heartbeat should work with all supported versions of Percona XtraDB
Cluster (\s-1PXC\s0), we recommend using 5.5.28\-23.7 and newer.
.PP
If you are setting up heartbeat instances between cluster nodes, keep in mind
that, since the speed of the cluster is determined by its slowest node,
pt-heartbeat will not report how fast the cluster itself is, but only how
fast events are replicating from one node to another.
.PP
You must specify \*(L"\-\-master\-server\-id\*(R" for \*(L"\-\-monitor\*(R" and \*(L"\-\-check\*(R"
instances.
.SH "OPTIONS"
.IX Header "OPTIONS"
Specify at least one of \*(L"\-\-stop\*(R", \*(L"\-\-update\*(R", \*(L"\-\-monitor\*(R", or \*(L"\-\-check\*(R".
.PP
\&\*(L"\-\-update\*(R", \*(L"\-\-monitor\*(R", and \*(L"\-\-check\*(R" are mutually exclusive.
.PP
\&\*(L"\-\-daemonize\*(R" and \*(L"\-\-check\*(R" are mutually exclusive.
.PP
This tool accepts additional command-line arguments.  Refer to the
\&\*(L"\s-1SYNOPSIS\*(R"\s0 and usage information for details.
.IP "\-\-ask\-pass" 4
.IX Item "--ask-pass"
Prompt for a password when connecting to MySQL.
.IP "\-\-charset" 4
.IX Item "--charset"
short form: \-A; type: string
.Sp
Default character set.  If the value is utf8, sets Perl's binmode on \s-1STDOUT\s0 to
utf8, passes the mysql_enable_utf8 option to DBD::mysql, and runs \s-1SET NAMES UTF8\s0
after connecting to MySQL.  Any other value sets binmode on \s-1STDOUT\s0 without the
utf8 layer, and runs \s-1SET NAMES\s0 after connecting to MySQL.
.IP "\-\-check" 4
.IX Item "--check"
Check slave delay once and exit.  If you also specify \*(L"\-\-recurse\*(R", the
tool will try to discover slave's of the given slave and check and print
their lag, too.  The hostname or \s-1IP\s0 and port for each slave is printed
before its delay.  \*(L"\-\-recurse\*(R" only works with MySQL.
.IP "\-\-check\-read\-only" 4
.IX Item "--check-read-only"
Check if the server has read_only enabled; If it does, the tool skips doing
any inserts.
.IP "\-\-config" 4
.IX Item "--config"
type: Array
.Sp
Read this comma-separated list of config files; if specified, this must be the
first option on the command line.
.IP "\-\-create\-table" 4
.IX Item "--create-table"
Create the heartbeat \*(L"\-\-table\*(R" if it does not exist.
.Sp
This option causes the table specified by \*(L"\-\-database\*(R" and \*(L"\-\-table\*(R" to
be created with the following MAGIC_create_heartbeat table definition:
.Sp
.Vb 8
\&  CREATE TABLE heartbeat (
\&    ts                    varchar(26) NOT NULL,
\&    server_id             int unsigned NOT NULL PRIMARY KEY,
\&    file                  varchar(255) DEFAULT NULL,    \-\- SHOW MASTER STATUS
\&    position              bigint unsigned DEFAULT NULL, \-\- SHOW MASTER STATUS
\&    relay_master_log_file varchar(255) DEFAULT NULL,    \-\- SHOW SLAVE STATUS 
\&    exec_master_log_pos   bigint unsigned DEFAULT NULL  \-\- SHOW SLAVE STATUS
\&  );
.Ve
.Sp
The heartbeat table requires at least one row.  If you manually create the
heartbeat table, then you must insert a row by doing:
.Sp
.Vb 1
\&  INSERT INTO heartbeat (ts, server_id) VALUES (NOW(), N);
.Ve
.Sp
or if using \*(L"\-\-utc\*(R":
.Sp
.Vb 1
\&  INSERT INTO heartbeat (ts, server_id) VALUES (UTC_TIMESTAMP(), N);
.Ve
.Sp
where \f(CW\*(C`N\*(C'\fR is the server's \s-1ID\s0; do not use @@server_id because it will replicate
and slaves will insert their own server \s-1ID\s0 instead of the master's server \s-1ID.\s0
.Sp
This is done automatically by \*(L"\-\-create\-table\*(R".
.Sp
A legacy version of the heartbeat table is still supported:
.Sp
.Vb 4
\&  CREATE TABLE heartbeat (
\&    id int NOT NULL PRIMARY KEY,
\&    ts datetime NOT NULL
\&  );
.Ve
.Sp
Legacy tables do not support \*(L"\-\-update\*(R" instances on each slave
of a multi-slave hierarchy like \*(L"master \-> slave1 \-> slave2\*(R".
To manually insert the one required row into a legacy table:
.Sp
.Vb 1
\&  INSERT INTO heartbeat (id, ts) VALUES (1, NOW());
.Ve
.Sp
or if using \*(L"\-\-utc\*(R":
.Sp
.Vb 1
\&  INSERT INTO heartbeat (id, ts) VALUES (1, UTC_TIMESTAMP());
.Ve
.Sp
The tool automatically detects if the heartbeat table is legacy.
.Sp
See also \*(L"MULTI-SLAVE \s-1HIERARCHY\*(R"\s0.
.IP "\-\-daemonize" 4
.IX Item "--daemonize"
Fork to the background and detach from the shell.  \s-1POSIX\s0 operating systems only.
.IP "\-\-database" 4
.IX Item "--database"
short form: \-D; type: string
.Sp
The database to use for the connection.
.IP "\-\-dbi\-driver" 4
.IX Item "--dbi-driver"
default: mysql; type: string
.Sp
Specify a driver for the connection; \f(CW\*(C`mysql\*(C'\fR and \f(CW\*(C`Pg\*(C'\fR are supported.
.IP "\-\-defaults\-file" 4
.IX Item "--defaults-file"
short form: \-F; type: string
.Sp
Only read mysql options from the given file.  You must give an absolute
pathname.
.IP "\-\-file" 4
.IX Item "--file"
type: string
.Sp
Print latest \*(L"\-\-monitor\*(R" output to this file.
.Sp
When \*(L"\-\-monitor\*(R" is given, prints output to the specified file instead of to
\&\s-1STDOUT.\s0  The file is opened, truncated, and closed every interval, so it will
only contain the most recent statistics.  Useful when \*(L"\-\-daemonize\*(R" is given.
.IP "\-\-frames" 4
.IX Item "--frames"
type: string; default: 1m,5m,15m
.Sp
Timeframes for averages.
.Sp
Specifies the timeframes over which to calculate moving averages when
\&\*(L"\-\-monitor\*(R" is given.  Specify as a comma-separated list of numbers with
suffixes.  The suffix can be s for seconds, m for minutes, h for hours, or d for
days.  The size of the largest frame determines the maximum memory usage, as up
to the specified number of per-second samples are kept in memory to calculate
the averages.  You can specify as many timeframes as you like.
.IP "\-\-help" 4
.IX Item "--help"
Show help and exit.
.IP "\-\-host" 4
.IX Item "--host"
short form: \-h; type: string
.Sp
Connect to host.
.IP "\-\-[no]insert\-heartbeat\-row" 4
.IX Item "--[no]insert-heartbeat-row"
default: yes
.Sp
Insert a heartbeat row in the \*(L"\-\-table\*(R" if one doesn't exist.
.Sp
The heartbeat \*(L"\-\-table\*(R" requires a heartbeat row, else there's nothing
to \*(L"\-\-update\*(R", \*(L"\-\-monitor\*(R", or \*(L"\-\-check\*(R"!  By default, the tool will
insert a heartbeat row if one is not already present.  You can disable this
feature by specifying \f(CW\*(C`\-\-no\-insert\-heartbeat\-row\*(C'\fR in case the database user
does not have \s-1INSERT\s0 privileges.
.IP "\-\-interval" 4
.IX Item "--interval"
type: float; default: 1.0
.Sp
How often to update or check the heartbeat \*(L"\-\-table\*(R".  Updates and checks
begin on the first whole second then repeat every \*(L"\-\-interval\*(R" seconds
for \*(L"\-\-update\*(R" and every \*(L"\-\-interval\*(R" plus \*(L"\-\-skew\*(R" seconds for
\&\*(L"\-\-monitor\*(R".
.Sp
For example, if at 00:00.4 an \*(L"\-\-update\*(R" instance is started at 0.5 second
intervals, the first update happens at 00:01.0, the next at 00:01.5, etc.
If at 00:10.7 a \*(L"\-\-monitor\*(R" instance is started at 0.05 second intervals
with the default 0.5 second \*(L"\-\-skew\*(R", then the first check happens at
00:11.5 (00:11.0 + 0.5) which will be \*(L"\-\-skew\*(R" seconds after the last update
which, because the instances are checking at synchronized intervals, happened
at 00:11.0.
.Sp
The tool waits for and begins on the first whole second just to make the
interval calculations simpler.  Therefore, the tool could wait up to 1 second
before updating or checking.
.Sp
The minimum (fastest) interval is 0.01, and the maximum precision is two
decimal places, so 0.015 will be rounded to 0.02.
.Sp
If a legacy heartbeat table (see \*(L"\-\-create\-table\*(R") is used, then the
maximum precision is 1s because the \f(CW\*(C`ts\*(C'\fR column is type \f(CW\*(C`datetime\*(C'\fR.
.IP "\-\-log" 4
.IX Item "--log"
type: string
.Sp
Print all output to this file when daemonized.
.IP "\-\-master\-server\-id" 4
.IX Item "--master-server-id"
type: string
.Sp
Calculate delay from this master server \s-1ID\s0 for \*(L"\-\-monitor\*(R" or \*(L"\-\-check\*(R".
If not given, pt-heartbeat attempts to connect to the server's master and
determine its server id.
.IP "\-\-monitor" 4
.IX Item "--monitor"
Monitor slave delay continuously.
.Sp
Specifies that pt-heartbeat should check the slave's delay every second and
report to \s-1STDOUT\s0 (or if \*(L"\-\-file\*(R" is given, to the file instead).  The output
is the current delay followed by moving averages over the timeframe given in
\&\*(L"\-\-frames\*(R".  For example,
.Sp
.Vb 1
\& 5s [  0.25s,  0.05s,  0.02s ]
.Ve
.IP "\-\-password" 4
.IX Item "--password"
short form: \-p; type: string
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\-\-pid" 4
.IX Item "--pid"
type: string
.Sp
Create the given \s-1PID\s0 file.  The tool won't start if the \s-1PID\s0 file already
exists and the \s-1PID\s0 it contains is different than the current \s-1PID.\s0  However,
if the \s-1PID\s0 file exists and the \s-1PID\s0 it contains is no longer running, the
tool will overwrite the \s-1PID\s0 file with the current \s-1PID.\s0  The \s-1PID\s0 file is
removed automatically when the tool exits.
.IP "\-\-port" 4
.IX Item "--port"
short form: \-P; type: int
.Sp
Port number to use for connection.
.IP "\-\-print\-master\-server\-id" 4
.IX Item "--print-master-server-id"
Print the auto-detected or given \*(L"\-\-master\-server\-id\*(R".  If \*(L"\-\-check\*(R"
or \*(L"\-\-monitor\*(R" is specified, specifying this option will print the
auto-detected or given \*(L"\-\-master\-server\-id\*(R" at the end of each line.
.IP "\-\-recurse" 4
.IX Item "--recurse"
type: int
.Sp
Check slaves recursively to this depth in \*(L"\-\-check\*(R" mode.
.Sp
Try to discover slave servers recursively, to the specified depth.  After
discovering servers, run the check on each one of them and print the hostname
(if possible), followed by the slave delay.
.Sp
This currently works only with MySQL.  See \*(L"\-\-recursion\-method\*(R".
.IP "\-\-recursion\-method" 4
.IX Item "--recursion-method"
type: array; default: processlist,hosts
.Sp
Preferred recursion method used to find slaves.
.Sp
Possible methods are:
.Sp
.Vb 5
\&  METHOD       USES
\&  ===========  ==================
\&  processlist  SHOW PROCESSLIST
\&  hosts        SHOW SLAVE HOSTS
\&  none         Do not find slaves
.Ve
.Sp
The processlist method is preferred because \s-1SHOW SLAVE HOSTS\s0 is not reliable.
However, the hosts method is required if the server uses a non-standard
port (not 3306).  Usually pt-heartbeat does the right thing and finds
the slaves, but you may give a preferred method and it will be used first.
If it doesn't find any slaves, the other methods will be tried.
.IP "\-\-replace" 4
.IX Item "--replace"
Use \f(CW\*(C`REPLACE\*(C'\fR instead of \f(CW\*(C`UPDATE\*(C'\fR for \-\-update.
.Sp
When running in \*(L"\-\-update\*(R" mode, use \f(CW\*(C`REPLACE\*(C'\fR instead of \f(CW\*(C`UPDATE\*(C'\fR to set
the heartbeat table's timestamp.  The \f(CW\*(C`REPLACE\*(C'\fR statement is a MySQL extension
to \s-1SQL.\s0  This option is useful when you don't know whether the table contains
any rows or not.  It must be used in conjunction with \-\-update.
.IP "\-\-run\-time" 4
.IX Item "--run-time"
type: time
.Sp
Time to run before exiting.
.IP "\-\-sentinel" 4
.IX Item "--sentinel"
type: string; default: /tmp/pt\-heartbeat\-sentinel
.Sp
Exit if this file exists.
.IP "\-\-set\-vars" 4
.IX Item "--set-vars"
type: Array
.Sp
Set the MySQL variables in this comma-separated list of \f(CW\*(C`variable=value\*(C'\fR pairs.
.Sp
By default, the tool sets:
.Sp
.Vb 1
\&   wait_timeout=10000
.Ve
.Sp
Variables specified on the command line override these defaults.  For
example, specifying \f(CW\*(C`\-\-set\-vars wait_timeout=500\*(C'\fR overrides the defaultvalue of \f(CW10000\fR.
.Sp
The tool prints a warning and continues if a variable cannot be set.
.IP "\-\-skew" 4
.IX Item "--skew"
type: float; default: 0.5
.Sp
How long to delay checks.
.Sp
The default is to delay checks one half second.  Since the update happens as
soon as possible after the beginning of the second on the master, this allows
one half second of replication delay before reporting that the slave lags the
master by one second.  If your clocks are not completely accurate or there is
some other reason you'd like to delay the slave more or less, you can tweak this
value.  Try setting the \f(CW\*(C`PTDEBUG\*(C'\fR environment variable to see the effect this
has.
.IP "\-\-socket" 4
.IX Item "--socket"
short form: \-S; type: string
.Sp
Socket file to use for connection.
.IP "\-\-stop" 4
.IX Item "--stop"
Stop running instances by creating the sentinel file.
.Sp
This should have the effect of stopping all running
instances which are watching the same sentinel file.  If none of
\&\*(L"\-\-update\*(R", \*(L"\-\-monitor\*(R" or \*(L"\-\-check\*(R" is specified, \f(CW\*(C`pt\-heartbeat\*(C'\fR
will exit after creating the file.  If one of these is specified,
\&\f(CW\*(C`pt\-heartbeat\*(C'\fR will wait the interval given by \*(L"\-\-interval\*(R", then remove
the file and continue working.
.Sp
You might find this handy to stop cron jobs gracefully if necessary, or to
replace one running instance with another.  For example, if you want to stop
and restart \f(CW\*(C`pt\-heartbeat\*(C'\fR every hour (just to make sure that it is restarted
every hour, in case of a server crash or some other problem), you could use a
\&\f(CW\*(C`crontab\*(C'\fR line like this:
.Sp
.Vb 2
\& 0 * * * * pt\-heartbeat \-\-update \-D test \-\-stop \e
\&   \-\-sentinel /tmp/pt\-heartbeat\-hourly
.Ve
.Sp
The non-default \*(L"\-\-sentinel\*(R" will make sure the hourly \f(CW\*(C`cron\*(C'\fR job stops
only instances previously started with the same options (that is, from the
same \f(CW\*(C`cron\*(C'\fR job).
.Sp
See also \*(L"\-\-sentinel\*(R".
.IP "\-\-table" 4
.IX Item "--table"
type: string; default: heartbeat
.Sp
The table to use for the heartbeat.
.Sp
Don't specify database.table; use \*(L"\-\-database\*(R" to specify the database.
.Sp
See \*(L"\-\-create\-table\*(R".
.IP "\-\-update" 4
.IX Item "--update"
Update a master's heartbeat.
.IP "\-\-user" 4
.IX Item "--user"
short form: \-u; type: string
.Sp
User for login if not current user.
.IP "\-\-utc" 4
.IX Item "--utc"
Ignore system time zones and use only \s-1UTC.\s0  By default pt-heartbeat does
not check or adjust for different system or MySQL time zones which can
cause the tool to compute the lag incorrectly.  Specifying this option is
a good idea because it ensures that the tool works correctly regardless of
time zones.
.Sp
If used, this option must be used for all pt-heartbeat instances:
\&\*(L"\-\-update\*(R", \*(L"\-\-monitor\*(R", \*(L"\-\-check\*(R", etc.  You should probably
set the option in a \*(L"\-\-config\*(R" file.  Mixing this option with pt-heartbeat
instances not using this option will cause false-positive lag readings
due to different time zones (unless all your systems are set to use \s-1UTC,\s0
in which case this option isn't required).
.IP "\-\-version" 4
.IX Item "--version"
Show version and exit.
.IP "\-\-[no]version\-check" 4
.IX Item "--[no]version-check"
default: yes
.Sp
Check for the latest version of Percona Toolkit, MySQL, and other programs.
.Sp
This is a standard \*(L"check for updates automatically\*(R" feature, with two
additional features.  First, the tool checks the version of other programs
on the local system in addition to its own version.  For example, it checks
the version of every MySQL server it connects to, Perl, and the Perl module
DBD::mysql.  Second, it checks for and warns about versions with known
problems.  For example, MySQL 5.5.25 had a critical bug and was re-released
as 5.5.25a.
.Sp
Any updates or known problems are printed to \s-1STDOUT\s0 before the tool's normal
output.  This feature should never interfere with the normal operation of the
tool.
.Sp
For more information, visit <https://www.percona.com/version\-check>.
.SH "DSN OPTIONS"
.IX Header "DSN OPTIONS"
These \s-1DSN\s0 options are used to create a \s-1DSN.\s0  Each option is given like
\&\f(CW\*(C`option=value\*(C'\fR.  The options are case-sensitive, so P and p are not the
same option.  There cannot be whitespace before or after the \f(CW\*(C`=\*(C'\fR and
if the value contains whitespace it must be quoted.  \s-1DSN\s0 options are
comma-separated.  See the percona-toolkit manpage for full details.
.IP "\(bu" 4
A
.Sp
dsn: charset; copy: yes
.Sp
Default character set.
.IP "\(bu" 4
D
.Sp
dsn: database; copy: yes
.Sp
Default database.
.IP "\(bu" 4
F
.Sp
dsn: mysql_read_default_file; copy: yes
.Sp
Only read default options from the given file
.IP "\(bu" 4
h
.Sp
dsn: host; copy: yes
.Sp
Connect to host.
.IP "\(bu" 4
p
.Sp
dsn: password; copy: yes
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\(bu" 4
P
.Sp
dsn: port; copy: yes
.Sp
Port number to use for connection.
.IP "\(bu" 4
S
.Sp
dsn: mysql_socket; copy: yes
.Sp
Socket file to use for connection.
.IP "\(bu" 4
u
.Sp
dsn: user; copy: yes
.Sp
User for login if not current user.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The environment variable \f(CW\*(C`PTDEBUG\*(C'\fR enables verbose debugging output to \s-1STDERR.\s0
To enable debugging and capture all output to a file, run the tool like:
.PP
.Vb 1
\&   PTDEBUG=1 pt\-heartbeat ... > FILE 2>&1
.Ve
.PP
Be careful: debugging output is voluminous and can generate several megabytes
of output.
.SH "SYSTEM REQUIREMENTS"
.IX Header "SYSTEM REQUIREMENTS"
You need Perl, \s-1DBI,\s0 DBD::mysql, and some core packages that ought to be
installed in any reasonably new version of Perl.
.SH "BUGS"
.IX Header "BUGS"
For a list of known bugs, see <http://www.percona.com/bugs/pt\-heartbeat>.
.PP
Please report bugs at <https://bugs.launchpad.net/percona\-toolkit>.
Include the following information in your bug report:
.IP "\(bu" 4
Complete command-line used to run the tool
.IP "\(bu" 4
Tool \*(L"\-\-version\*(R"
.IP "\(bu" 4
MySQL version of all servers involved
.IP "\(bu" 4
Output from the tool including \s-1STDERR\s0
.IP "\(bu" 4
Input files (log/dump/config files, etc.)
.PP
If possible, include debugging output by running the tool with \f(CW\*(C`PTDEBUG\*(C'\fR;
see \*(L"\s-1ENVIRONMENT\*(R"\s0.
.SH "DOWNLOADING"
.IX Header "DOWNLOADING"
Visit <http://www.percona.com/software/percona\-toolkit/> to download the
latest release of Percona Toolkit.  Or, get the latest release from the
command line:
.PP
.Vb 1
\&   wget percona.com/get/percona\-toolkit.tar.gz
\&
\&   wget percona.com/get/percona\-toolkit.rpm
\&
\&   wget percona.com/get/percona\-toolkit.deb
.Ve
.PP
You can also get individual tools from the latest release:
.PP
.Vb 1
\&   wget percona.com/get/TOOL
.Ve
.PP
Replace \f(CW\*(C`TOOL\*(C'\fR with the name of any tool.
.SH "AUTHORS"
.IX Header "AUTHORS"
Proven Scaling \s-1LLC,\s0 SixApart Ltd, Baron Schwartz, and Daniel Nichter
.SH "ABOUT PERCONA TOOLKIT"
.IX Header "ABOUT PERCONA TOOLKIT"
This tool is part of Percona Toolkit, a collection of advanced command-line
tools for MySQL developed by Percona.  Percona Toolkit was forked from two
projects in June, 2011: Maatkit and Aspersa.  Those projects were created by
Baron Schwartz and primarily developed by him and Daniel Nichter.  Visit
<http://www.percona.com/software/> to learn about other free, open-source
software from Percona.
.SH "COPYRIGHT, LICENSE, AND WARRANTY"
.IX Header "COPYRIGHT, LICENSE, AND WARRANTY"
This program is copyright 2007\-2016 Percona \s-1LLC\s0 and/or its affiliates,
2006 Proven Scaling \s-1LLC\s0 and Six Apart Ltd.
.PP
Feedback and improvements are welcome.
.PP
\&\s-1THIS PROGRAM IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation, version 2; \s-1OR\s0 the Perl Artistic License.  On \s-1UNIX\s0 and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA.\s0
.SH "VERSION"
.IX Header "VERSION"
pt-heartbeat 2.2.17
