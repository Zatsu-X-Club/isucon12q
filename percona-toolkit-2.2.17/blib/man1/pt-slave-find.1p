.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PT-SLAVE-FIND 1p"
.TH PT-SLAVE-FIND 1p "2016-03-07" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pt\-slave\-find \- Find and print replication hierarchy tree of MySQL slaves.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage: pt-slave-find [\s-1OPTIONS\s0] [\s-1DSN\s0]
.PP
pt-slave-find finds and prints a hierarchy tree of MySQL slaves.
.PP
Examples:
.PP
.Vb 1
\&   pt\-slave\-find \-\-host master\-host
.Ve
.SH "RISKS"
.IX Header "RISKS"
Percona Toolkit is mature, proven in the real world, and well tested,
but all database tools can pose a risk to the system and the database
server.  Before using this tool, please:
.IP "\(bu" 4
Read the tool's documentation
.IP "\(bu" 4
Review the tool's known \*(L"\s-1BUGS\*(R"\s0
.IP "\(bu" 4
Test the tool on a non-production server
.IP "\(bu" 4
Backup your production server and verify the backups
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
pt-slave-find connects to a MySQL replication master and finds its slaves.
Currently the only thing it can do is print a tree-like view of the replication
hierarchy.
.PP
The master host can be specified using one of two methods.  The first method is
to use the standard connection-related command line options:
\&\*(L"\-\-defaults\-file\*(R", \*(L"\-\-password\*(R", \*(L"\-\-host\*(R", \*(L"\-\-port\*(R", \*(L"\-\-socket\*(R"
or \*(L"\-\-user\*(R".
.PP
The second method to specify the master host is a \s-1DSN.\s0  A \s-1DSN\s0 is a special
syntax that can be either just a hostname (like \f(CW\*(C`server.domain.com\*(C'\fR or
\&\f(CW1.2.3.4\fR), or a \f(CW\*(C`key=value,key=value\*(C'\fR string. Keys are a single letter:
.PP
.Vb 8
\&   KEY MEANING
\&   === =======
\&   h   Connect to host
\&   P   Port number to use for connection
\&   S   Socket file to use for connection
\&   u   User for login if not current user
\&   p   Password to use when connecting
\&   F   Only read default options from the given file
.Ve
.PP
\&\f(CW\*(C`pt\-slave\-find\*(C'\fR reads all normal MySQL option files, such as ~/.my.cnf, so
you may not need to specify username, password and other common options at all.
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
An exit status of 0 (sometimes also called a return value or return code)
indicates success.  Any other value represents the exit status of
the Perl process itself.
.SH "OPTIONS"
.IX Header "OPTIONS"
This tool accepts additional command-line arguments.  Refer to the
\&\*(L"\s-1SYNOPSIS\*(R"\s0 and usage information for details.
.IP "\-\-ask\-pass" 4
.IX Item "--ask-pass"
Prompt for a password when connecting to MySQL.
.IP "\-\-charset" 4
.IX Item "--charset"
short form: \-A; type: string
.Sp
Default character set.  If the value is utf8, sets Perl's binmode on
\&\s-1STDOUT\s0 to utf8, passes the mysql_enable_utf8 option to DBD::mysql, and
runs \s-1SET NAMES UTF8\s0 after connecting to MySQL.  Any other value sets
binmode on \s-1STDOUT\s0 without the utf8 layer, and runs \s-1SET NAMES\s0 after
connecting to MySQL.
.IP "\-\-config" 4
.IX Item "--config"
type: Array
.Sp
Read this comma-separated list of config files; if specified, this must be the
first option on the command line.
.IP "\-\-database" 4
.IX Item "--database"
type: string; short form: \-D
.Sp
Database to use.
.IP "\-\-defaults\-file" 4
.IX Item "--defaults-file"
short form: \-F; type: string
.Sp
Only read mysql options from the given file.  You must give an absolute
pathname.
.IP "\-\-help" 4
.IX Item "--help"
Show help and exit.
.IP "\-\-host" 4
.IX Item "--host"
short form: \-h; type: string
.Sp
Connect to host.
.IP "\-\-password" 4
.IX Item "--password"
short form: \-p; type: string
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\-\-pid" 4
.IX Item "--pid"
type: string
.Sp
Create the given \s-1PID\s0 file.  The tool won't start if the \s-1PID\s0 file already
exists and the \s-1PID\s0 it contains is different than the current \s-1PID.\s0  However,
if the \s-1PID\s0 file exists and the \s-1PID\s0 it contains is no longer running, the
tool will overwrite the \s-1PID\s0 file with the current \s-1PID.\s0  The \s-1PID\s0 file is
removed automatically when the tool exits.
.IP "\-\-port" 4
.IX Item "--port"
short form: \-P; type: int
.Sp
Port number to use for connection.
.IP "\-\-recurse" 4
.IX Item "--recurse"
type: int
.Sp
Number of levels to recurse in the hierarchy.  Default is infinite.
.Sp
See \*(L"\-\-recursion\-method\*(R".
.IP "\-\-recursion\-method" 4
.IX Item "--recursion-method"
type: array; default: processlist,hosts
.Sp
Preferred recursion method used to find slaves.
.Sp
Possible methods are:
.Sp
.Vb 5
\&  METHOD       USES
\&  ===========  ==================
\&  processlist  SHOW PROCESSLIST
\&  hosts        SHOW SLAVE HOSTS
\&  none         Do not find slaves
.Ve
.Sp
The processlist method is preferred because \s-1SHOW SLAVE HOSTS\s0 is not reliable.
However, the hosts method is required if the server uses a non-standard
port (not 3306).  Usually pt-slave-find does the right thing and finds
the slaves, but you may give a preferred method and it will be used first.
If it doesn't find any slaves, the other methods will be tried.
.IP "\-\-report\-format" 4
.IX Item "--report-format"
type: string; default: summary
.Sp
Set what information about the slaves is printed.  The report format can be
one of the following:
.RS 4
.IP "\(bu" 4
hostname
.Sp
Print just the hostname name of the slaves.  It looks like:
.Sp
.Vb 3
\&  127.0.0.1:12345
\&  +\- 127.0.0.1:12346
\&     +\- 127.0.0.1:12347
.Ve
.IP "\(bu" 4
summary
.Sp
Print a summary of each slave's settings.  This report shows more information
about each slave, like:
.Sp
.Vb 10
\&  127.0.0.1:12345
\&  Version         5.1.34\-log
\&  Server ID       12345
\&  Uptime          04:56 (started 2010\-06\-17T11:21:22)
\&  Replication     Is not a slave, has 1 slaves connected
\&  Filters         
\&  Binary logging  STATEMENT
\&  Slave status    
\&  Slave mode      STRICT
\&  Auto\-increment  increment 1, offset 1
\&  +\- 127.0.0.1:12346
\&     Version         5.1.34\-log
\&     Server ID       12346
\&     Uptime          04:54 (started 2010\-06\-17T11:21:24)
\&     Replication     Is a slave, has 1 slaves connected
\&     Filters         
\&     Binary logging  STATEMENT
\&     Slave status    0 seconds behind, running, no errors
\&     Slave mode      STRICT
\&     Auto\-increment  increment 1, offset 1
.Ve
.RE
.RS 4
.RE
.IP "\-\-resolve\-address" 4
.IX Item "--resolve-address"
Resolve ip-address to hostname. Report will print both \s-1IP\s0 and hostname.
.Sp
Example:
.Sp
.Vb 1
\&   10.10.7.14 (dbase1.sample.net)
.Ve
.Sp
Might delay runtime a few seconds.
.IP "\-\-set\-vars" 4
.IX Item "--set-vars"
type: Array
.Sp
Set the MySQL variables in this comma-separated list of \f(CW\*(C`variable=value\*(C'\fR pairs.
.Sp
By default, the tool sets:
.Sp
.Vb 1
\&   wait_timeout=10000
.Ve
.Sp
Variables specified on the command line override these defaults.  For
example, specifying \f(CW\*(C`\-\-set\-vars wait_timeout=500\*(C'\fR overrides the defaultvalue of \f(CW10000\fR.
.Sp
The tool prints a warning and continues if a variable cannot be set.
.IP "\-\-socket" 4
.IX Item "--socket"
short form: \-S; type: string
.Sp
Socket file to use for connection.
.IP "\-\-user" 4
.IX Item "--user"
short form: \-u; type: string
.Sp
User for login if not current user.
.IP "\-\-version" 4
.IX Item "--version"
Show version and exit.
.SH "DSN OPTIONS"
.IX Header "DSN OPTIONS"
These \s-1DSN\s0 options are used to create a \s-1DSN.\s0  Each option is given like
\&\f(CW\*(C`option=value\*(C'\fR.  The options are case-sensitive, so P and p are not the
same option.  There cannot be whitespace before or after the \f(CW\*(C`=\*(C'\fR and
if the value contains whitespace it must be quoted.  \s-1DSN\s0 options are
comma-separated.  See the percona-toolkit manpage for full details.
.IP "\(bu" 4
A
.Sp
dsn: charset; copy: yes
.Sp
Default character set.
.IP "\(bu" 4
D
.Sp
dsn: database; copy: yes
.Sp
Default database.
.IP "\(bu" 4
F
.Sp
dsn: mysql_read_default_file; copy: yes
.Sp
Only read default options from the given file
.IP "\(bu" 4
h
.Sp
dsn: host; copy: yes
.Sp
Connect to host.
.IP "\(bu" 4
p
.Sp
dsn: password; copy: yes
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\(bu" 4
P
.Sp
dsn: port; copy: yes
.Sp
Port number to use for connection.
.IP "\(bu" 4
S
.Sp
dsn: mysql_socket; copy: yes
.Sp
Socket file to use for connection.
.IP "\(bu" 4
u
.Sp
dsn: user; copy: yes
.Sp
User for login if not current user.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The environment variable \f(CW\*(C`PTDEBUG\*(C'\fR enables verbose debugging output to \s-1STDERR.\s0
To enable debugging and capture all output to a file, run the tool like:
.PP
.Vb 1
\&   PTDEBUG=1 pt\-slave\-find ... > FILE 2>&1
.Ve
.PP
Be careful: debugging output is voluminous and can generate several megabytes
of output.
.SH "SYSTEM REQUIREMENTS"
.IX Header "SYSTEM REQUIREMENTS"
You need Perl, \s-1DBI,\s0 DBD::mysql, and some core packages that ought to be
installed in any reasonably new version of Perl.
.SH "BUGS"
.IX Header "BUGS"
For a list of known bugs, see <http://www.percona.com/bugs/pt\-slave\-find>.
.PP
Please report bugs at <https://bugs.launchpad.net/percona\-toolkit>.
Include the following information in your bug report:
.IP "\(bu" 4
Complete command-line used to run the tool
.IP "\(bu" 4
Tool \*(L"\-\-version\*(R"
.IP "\(bu" 4
MySQL version of all servers involved
.IP "\(bu" 4
Output from the tool including \s-1STDERR\s0
.IP "\(bu" 4
Input files (log/dump/config files, etc.)
.PP
If possible, include debugging output by running the tool with \f(CW\*(C`PTDEBUG\*(C'\fR;
see \*(L"\s-1ENVIRONMENT\*(R"\s0.
.SH "DOWNLOADING"
.IX Header "DOWNLOADING"
Visit <http://www.percona.com/software/percona\-toolkit/> to download the
latest release of Percona Toolkit.  Or, get the latest release from the
command line:
.PP
.Vb 1
\&   wget percona.com/get/percona\-toolkit.tar.gz
\&
\&   wget percona.com/get/percona\-toolkit.rpm
\&
\&   wget percona.com/get/percona\-toolkit.deb
.Ve
.PP
You can also get individual tools from the latest release:
.PP
.Vb 1
\&   wget percona.com/get/TOOL
.Ve
.PP
Replace \f(CW\*(C`TOOL\*(C'\fR with the name of any tool.
.SH "AUTHORS"
.IX Header "AUTHORS"
Baron Schwartz and Daniel Nichter
.SH "ABOUT PERCONA TOOLKIT"
.IX Header "ABOUT PERCONA TOOLKIT"
This tool is part of Percona Toolkit, a collection of advanced command-line
tools for MySQL developed by Percona.  Percona Toolkit was forked from two
projects in June, 2011: Maatkit and Aspersa.  Those projects were created by
Baron Schwartz and primarily developed by him and Daniel Nichter.  Visit
<http://www.percona.com/software/> to learn about other free, open-source
software from Percona.
.SH "COPYRIGHT, LICENSE, AND WARRANTY"
.IX Header "COPYRIGHT, LICENSE, AND WARRANTY"
This program is copyright 2011\-2016 Percona \s-1LLC\s0 and/or its affiliates,
2007\-2011 Baron Schwartz.
.PP
\&\s-1THIS PROGRAM IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation, version 2; \s-1OR\s0 the Perl Artistic License.  On \s-1UNIX\s0 and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA.\s0
.SH "VERSION"
.IX Header "VERSION"
pt-slave-find 2.2.17
