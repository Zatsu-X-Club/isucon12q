.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PT-STALK 1p"
.TH PT-STALK 1p "2016-03-07" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pt\-stalk \- Collect forensic data about MySQL when problems occur.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage: pt-stalk [\s-1OPTIONS\s0]
.PP
pt-stalk waits for a trigger condition to occur, then collects data
to help diagnose problems.  The tool is designed to run as a daemon with root
privileges, so that you can diagnose intermittent problems that you cannot
observe directly.  You can also use it to execute a custom command, or to
collect data on demand without waiting for the trigger to occur.
.SH "RISKS"
.IX Header "RISKS"
Percona Toolkit is mature, proven in the real world, and well tested,
but all database tools can pose a risk to the system and the database
server.  Before using this tool, please:
.IP "\(bu" 4
Read the tool's documentation
.IP "\(bu" 4
Review the tool's known \*(L"\s-1BUGS\*(R"\s0
.IP "\(bu" 4
Test the tool on a non-production server
.IP "\(bu" 4
Backup your production server and verify the backups
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Sometimes a problem happens infrequently and for a short time, giving you no
chance to see the system when it happens. How do you solve intermittent MySQL
problems when you can't observe them? That's why pt-stalk exists. In addition to
using it when there's a known problem on your servers, it is a good idea to run
pt-stalk all the time, even when you think nothing is wrong.  You will
appreciate the data it collects when a problem occurs, because problems such as
MySQL lockups or spikes in activity typically leave no evidence to use in root
cause analysis.
.PP
pt-stalk does two things: it watches a MySQL server and waits for a trigger
condition to occur, and it collects diagnostic data when that trigger occurs.
To avoid false-positives caused by short-lived problems, the trigger condition
must be true at least \*(L"\-\-cycles\*(R" times before a \*(L"\-\-collect\*(R" is triggered.
.PP
To use pt-stalk effectively, you need to define a good trigger.  A good trigger
is sensitive enough to fire reliably when a problem occurs, so that you don't
miss a chance to solve problems.  On the other hand, a good trigger isn't
prone to false positives, so you don't gather information when the server
is functioning normally.
.PP
The most reliable triggers for MySQL tend to be the number of connections to the
server, and the number of queries running concurrently. These are available in
the \s-1SHOW GLOBAL STATUS\s0 command as Threads_connected and Threads_running.
Sometimes Threads_connected is not a reliable indicator of trouble, but
Threads_running usually is.  Your job, as the tool's user, is to define an
appropriate trigger condition for the tool.  Choose carefully, because the
quality of your results will depend on the trigger you choose.
.PP
You define the trigger with the \*(L"\-\-function\*(R", \*(L"\-\-variable\*(R", 
\&\*(L"\-\-threshold\*(R", and \*(L"\-\-cycles\*(R" options.  The default values
for these options define a reasonable trigger, but you should adjust
or change them to suite your particular system and needs.
.PP
By default, pt-stalk tool watches MySQL forever until the trigger occurs,
then it collects diagnostic data for a while, and sleeps afterwards to avoid
repeatedly collecting data if the trigger remains true.  The general order of
operations is:
.PP
.Vb 10
\&   while true; do
\&      if \-\-variable from \-\-function > \-\-threshold; then
\&         cycles_true++
\&         if cycles_true >= \-\-cycles; then
\&            \-\-notify\-by\-email
\&            if \-\-collect; then
\&               if \-\-disk\-bytes\-free and \-\-disk\-pct\-free ok; then
\&                  (\-\-collect for \-\-run\-time seconds) &
\&               fi
\&               rm files in \-\-dest older than \-\-retention\-time
\&            fi
\&            iter++
\&            cycles_true=0
\&         fi
\&         if iter < \-\-iterations; then
\&            sleep \-\-sleep seconds
\&         else
\&            break
\&         fi
\&      else
\&         if iter < \-\-iterations; then
\&            sleep \-\-interval seconds
\&         else
\&            break
\&         fi
\&      fi
\&   done
\&   rm old \-\-dest files older than \-\-retention\-time
\&   if \-\-collect process are still running; then
\&      wait up to \-\-run\-time * 3 seconds
\&      kill any remaining \-\-collect processes 
\&   fi
.Ve
.PP
The diagnostic data is written to files whose names begin with a timestamp, so
you can distinguish samples from each other in case the tool collects data
multiple times.  The pt-sift tool is designed to help you browse and analyze
the resulting data samples.
.PP
Although this sounds simple enough, in practice there are a number of
subtleties, such as detecting when the disk is beginning to fill up so that the
tool doesn't cause the server to run out of disk space.  This tool handles these
types of potential problems, so it's a good idea to use this tool instead of
writing something from scratch and possibly experiencing some of the hazards
this tool is designed to avoid.
.SH "CONFIGURING"
.IX Header "CONFIGURING"
You can use standard Percona Toolkit configuration files to set command line
options.
.PP
You will probably want to run the tool as a daemon and customize at least the
\&\*(L"\-\-threshold\*(R".  Here's a sample configuration file for triggering when
there are more than 20 queries running at once:
.PP
.Vb 2
\&  daemonize
\&  threshold=20
.Ve
.PP
If you don't run the tool as root, then you will need specify several options,
such as \*(L"\-\-pid\*(R", \*(L"\-\-log\*(R", and \*(L"\-\-dest\*(R", else the tool will probably
fail to start.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-ask\-pass" 4
.IX Item "--ask-pass"
Prompt for a password when connecting to MySQL.
.IP "\-\-collect" 4
.IX Item "--collect"
default: yes; negatable: yes
.Sp
Collect diagnostic data when the trigger occurs.  Specify \f(CW\*(C`\-\-no\-collect\*(C'\fR
to make the tool watch the system but not collect data.
.Sp
See also \*(L"\-\-stalk\*(R".
.IP "\-\-collect\-gdb" 4
.IX Item "--collect-gdb"
Collect \s-1GDB\s0 stacktraces.  This is achieved by attaching to MySQL and printing
stack traces from all threads. This will freeze the server for some period of
time, ranging from a second or so to much longer on very busy systems with a lot
of memory and many threads in the server.  For this reason, it is disabled by
default. However, if you are trying to diagnose a server stall or lockup,
freezing the server causes no additional harm, and the stack traces can be vital
for diagnosis.
.Sp
In addition to freezing the server, there is also some risk of the server
crashing or performing badly after \s-1GDB\s0 detaches from it.
.IP "\-\-collect\-oprofile" 4
.IX Item "--collect-oprofile"
Collect oprofile data.  This is achieved by starting an oprofile session,
letting it run for the collection time, and then stopping and saving the
resulting profile data in the system's default location.  Please read your
system's oprofile documentation to learn more about this.
.IP "\-\-collect\-strace" 4
.IX Item "--collect-strace"
Collect strace data. This is achieved by attaching strace to the server, which
will make it run very slowly until strace detaches.  The same cautions apply as
those listed in \-\-collect\-gdb.  You should not enable this option together with
\&\-\-collect\-gdb, because \s-1GDB\s0 and strace can't attach to the server process
simultaneously.
.IP "\-\-collect\-tcpdump" 4
.IX Item "--collect-tcpdump"
Collect tcpdump data. This option causes tcpdump to capture all traffic on all
interfaces for the port on which MySQL is listening.  You can later use
pt-query-digest to decode the MySQL protocol and extract a log of query traffic
from it.
.IP "\-\-config" 4
.IX Item "--config"
type: string
.Sp
Read this comma-separated list of config files.  If specified, this must be the
first option on the command line.
.IP "\-\-cycles" 4
.IX Item "--cycles"
type: int; default: 5
.Sp
How many times \*(L"\-\-variable\*(R" must be greater than \*(L"\-\-threshold\*(R" before triggering \*(L"\-\-collect\*(R".  This helps prevent false positives, and makes
the trigger condition less likely to fire when the problem recovers quickly.
.IP "\-\-daemonize" 4
.IX Item "--daemonize"
Daemonize the tool.  This causes the tool to fork into the background and log
its output as specified in \-\-log.
.IP "\-\-defaults\-file" 4
.IX Item "--defaults-file"
short form: \-F; type: string
.Sp
Only read mysql options from the given file.  You must give an absolute
pathname.
.IP "\-\-dest" 4
.IX Item "--dest"
type: string; default: /var/lib/pt\-stalk
.Sp
Where to save diagnostic data from \*(L"\-\-collect\*(R".  Each time the tool
collects data, it writes to a new set of files, which are named with the
current system timestamp.
.IP "\-\-disk\-bytes\-free" 4
.IX Item "--disk-bytes-free"
type: size; default: 100M
.Sp
Do not \*(L"\-\-collect\*(R" if the disk has less than this much free space.
This prevents the tool from filling up the disk with diagnostic data.
.Sp
If the \*(L"\-\-dest\*(R" directory contains a previously captured sample of data,
the tool will measure its size and use that as an estimate of how much data is
likely to be gathered this time, too.  It will then be even more pessimistic,
and will refuse to collect data unless the disk has enough free space to hold
the sample and still have the desired amount of free space.  For example, if
you'd like 100MB of free space and the previous diagnostic sample consumed
100MB, the tool won't collect any data unless the disk has 200MB free.
.Sp
Valid size value suffixes are k, M, G, and T.
.IP "\-\-disk\-pct\-free" 4
.IX Item "--disk-pct-free"
type: int; default: 5
.Sp
Do not \*(L"\-\-collect\*(R" if the disk has less than this percent free space.
This prevents the tool from filling up the disk with diagnostic data.
.Sp
This option works similarly to \*(L"\-\-disk\-bytes\-free\*(R" but specifies a
percentage margin of safety instead of a bytes margin of safety.
The tool honors both options, and will not collect any data unless both
margins are satisfied.
.IP "\-\-function" 4
.IX Item "--function"
type: string; default: status
.Sp
What to watch for the trigger.  The default value watches
\&\f(CW\*(C`SHOW GLOBAL STATUS\*(C'\fR, but you can also watch \f(CW\*(C`SHOW PROCESSLIST\*(C'\fR and specify
a file with your own custom code.  This function supplies the value of
\&\*(L"\-\-variable\*(R", which is then compared against \*(L"\-\-threshold\*(R" to see if the
the trigger condition is met.  Additional options may be required as
well; see below. Possible values are:
.RS 4
.IP "\(bu" 4
status
.Sp
Watch \f(CW\*(C`SHOW GLOBAL STATUS\*(C'\fR for the trigger.  The value of
\&\*(L"\-\-variable\*(R" then defines which status counter is the trigger.
.IP "\(bu" 4
processlist
.Sp
Watch \f(CW\*(C`SHOW FULL PROCESSLIST\*(C'\fR for the trigger.  The trigger
value is the count of processes whose \*(L"\-\-variable\*(R" column matches the
\&\*(L"\-\-match\*(R" option.  For example, to trigger \*(L"\-\-collect\*(R" when more than
10 processes are in the \*(L"statistics\*(R" state, specify:
.Sp
.Vb 4
\&   \-\-function processlist \e
\&   \-\-variable State       \e
\&   \-\-match statistics     \e
\&   \-\-threshold 10
.Ve
.RE
.RS 4
.Sp
In addition, you can specify a file that contains your custom trigger
function, written in Unix shell script.  This can be a wrapper that executes
anything you wish.  If the argument to \*(L"\-\-function\*(R" is a file, then it
takes precedence over built-in functions, so if there is a file in the working
directory named \*(L"status\*(R" or \*(L"processlist\*(R" then the tool will use that file
even though are valid built-in values.
.Sp
The file works by providing a function called \f(CW\*(C`trg_plugin\*(C'\fR, and the tool
simply sources the file and executes the function.  For example, the file
might contain:
.Sp
.Vb 4
\&   trg_plugin() {
\&      mysql $EXT_ARGV \-e "SHOW ENGINE INNODB STATUS" \e
\&        | grep \-c "has waited at"
\&   }
.Ve
.Sp
This snippet will count the number of mutex waits inside InnoDB.  It
illustrates the general principle: the function must output a number, which is
then compared to \*(L"\-\-threshold\*(R" as usual.  The \f(CW$EXT_ARGV\fR variable
contains the MySQL options mentioned in the \*(L"\s-1SYNOPSIS\*(R"\s0 above.
.Sp
The file should not alter the tool's existing global variables.  Prefix any
file-specific global variables with \*(L"\s-1PLUGIN_\*(R"\s0 or make them local.
.RE
.IP "\-\-help" 4
.IX Item "--help"
Print help and exit.
.IP "\-\-host" 4
.IX Item "--host"
short form: \-h; type: string
.Sp
Host to connect to.
.IP "\-\-interval" 4
.IX Item "--interval"
type: int; default: 1
.Sp
How often to check the if trigger is true, in seconds.
.IP "\-\-iterations" 4
.IX Item "--iterations"
type: int
.Sp
How many times to \*(L"\-\-collect\*(R" diagnostic data.  By default, the tool
runs forever and collects data every time the trigger occurs.
Specify \*(L"\-\-iterations\*(R" to collect data a limited number of times.
This option is also useful with \f(CW\*(C`\-\-no\-stalk\*(C'\fR to collect data once and
exit, for example.
.IP "\-\-log" 4
.IX Item "--log"
type: string; default: /var/log/pt\-stalk.log
.Sp
Print all output to this file when daemonized.
.IP "\-\-match" 4
.IX Item "--match"
type: string
.Sp
The pattern to use when watching \s-1SHOW PROCESSLIST.\s0  See \*(L"\-\-function\*(R"
for details.
.IP "\-\-notify\-by\-email" 4
.IX Item "--notify-by-email"
type: string
.Sp
Send an email to these addresses for every \*(L"\-\-collect\*(R".
.IP "\-\-password" 4
.IX Item "--password"
short form: \-p; type: string
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\-\-pid" 4
.IX Item "--pid"
type: string; default: /var/run/pt\-stalk.pid
.Sp
Create the given \s-1PID\s0 file.  The tool won't start if the \s-1PID\s0 file already
exists and the \s-1PID\s0 it contains is different than the current \s-1PID.\s0  However,
if the \s-1PID\s0 file exists and the \s-1PID\s0 it contains is no longer running, the
tool will overwrite the \s-1PID\s0 file with the current \s-1PID.\s0  The \s-1PID\s0 file is
removed automatically when the tool exits.
.IP "\-\-plugin" 4
.IX Item "--plugin"
type: string
.Sp
Load a plugin to hook into the tool and extend is functionality.
The specified file does not need to be executable, nor does its first line
need to be shebang line.  It only needs to define one or more of these
Bash functions:
.RS 4
.IP "before_stalk" 4
.IX Item "before_stalk"
Called before stalking.
.IP "before_collect" 4
.IX Item "before_collect"
Called when the trigger occurs, before running a \*(L"\-\-collect\*(R"
subprocesses in the background.
.IP "after_collect" 4
.IX Item "after_collect"
Called after running a collector process.  The \s-1PID\s0 of the collector process
is passed as the first argument.  This hook is called before
\&\f(CW\*(C`after_collect_sleep\*(C'\fR.
.IP "after_collect_sleep" 4
.IX Item "after_collect_sleep"
Called after sleeping \*(L"\-\-sleep\*(R" seconds for the collector process to finish.
This hook is called after \f(CW\*(C`after_collect\*(C'\fR.
.IP "after_interval_sleep" 4
.IX Item "after_interval_sleep"
Called after sleeping \*(L"\-\-interval\*(R" seconds after each trigger check.
.IP "after_stalk" 4
.IX Item "after_stalk"
Called after stalking.  Since pt-stalk stalks forever by default,
this hook is only called if \*(L"\-\-iterations\*(R" is specified.
.RE
.RS 4
.Sp
For example, a very simple plugin that touches a file when \*(L"\-\-collect\*(R"
is triggered:
.Sp
.Vb 3
\&   before_collect() {
\&      touch /tmp/foo
\&   }
.Ve
.Sp
Since the plugin is completely sourced (imported) into the tool's namespace,
be careful not to define other functions or global variables that already
exist in the tool.  You should prefix all plugin-specific functions and
global variables with \f(CW\*(C`plugin_\*(C'\fR or \f(CW\*(C`PLUGIN_\*(C'\fR.
.Sp
Plugins have access to all command line options but they should not modify
them.  Each option is a global variable like \f(CW$OPT_DEST\fR which corresponds
to \*(L"\-\-dest\*(R".  Therefore, the global variable for each command line option
is \f(CW\*(C`OPT_\*(C'\fR plus the option name in all caps with hyphens replaced by
underscores.
.Sp
Plugins can stop the tool by setting the global variable \f(CW\*(C`OKTORUN\*(C'\fR
to \f(CW1\fR.  In this case, the global variable \f(CW\*(C`EXIT_REASON\*(C'\fR should also
be set to indicate why the tool was stopped.
.Sp
Plugin writers should keep in mind that the file destination prefix currently
in use should be accessed through the \f(CW$prefix\fR variable, rather than
\&\f(CW$OPT_PREFIX\fR.
.RE
.IP "\-\-port" 4
.IX Item "--port"
short form: \-P; type: int
.Sp
Port number to use for connection.
.IP "\-\-prefix" 4
.IX Item "--prefix"
type: string
.Sp
The filename prefix for diagnostic samples.  By default, all files created
by the same \*(L"\-\-collect\*(R" instance have a timestamp prefix based on the current
local time, like \f(CW\*(C`2011_12_06_14_02_02\*(C'\fR, which is December 6, 2011 at 14:02:02.
.IP "\-\-retention\-time" 4
.IX Item "--retention-time"
type: int; default: 30
.Sp
Number of days to retain collected samples.  Any samples that are older will be
purged.
.IP "\-\-run\-time" 4
.IX Item "--run-time"
type: int; default: 30
.Sp
How long to \*(L"\-\-collect\*(R" diagnostic data when the trigger occurs.
The value is in seconds and should not be longer than \*(L"\-\-sleep\*(R".  It is
usually not necessary to change this; if the default 30 seconds doesn't
collect enough data, running longer is not likely to help because the system
or MySQL server is probably too busy to respond.  In fact, in many cases a
shorter collection period is appropriate.
.Sp
This value is used two other times.  After collecting, the collect subprocess
will wait another \*(L"\-\-run\-time\*(R" seconds for its commands to finish.  Some
commands can take awhile if the system is running very slowly (which can
likely be the case given that a collection was triggered).  Since empty files
are deleted, the extra wait gives commands time to finish and write their
data.  The value is potentially used again just before the tool exits to wait
again for any collect subprocesses to finish.  In most cases this won't
happen because of the aforementioned extra wait.  If it happens, the tool
will log \*(L"Waiting up to N seconds for subprocesses to finish...\*(R" where N is
three times \*(L"\-\-run\-time\*(R".  In both cases, after waiting, the tool kills
all of its subprocesses.
.IP "\-\-sleep" 4
.IX Item "--sleep"
type: int; default: 300
.Sp
How long to sleep after \*(L"\-\-collect\*(R".  This prevents the tool
from triggering continuously, which might be a problem if the collection process is intrusive.
It also prevents filling up the disk or gathering too much data to analyze
reasonably.
.IP "\-\-sleep\-collect" 4
.IX Item "--sleep-collect"
type: int; default: 1
.Sp
How long to sleep between collection loop cycles.  This is useful with
\&\f(CW\*(C`\-\-no\-stalk\*(C'\fR to do long collections.  For example, to collect data every
minute for an hour, specify: \f(CW\*(C`\-\-no\-stalk \-\-run\-time 3600 \-\-sleep\-collect 60\*(C'\fR.
.IP "\-\-socket" 4
.IX Item "--socket"
short form: \-S; type: string
.Sp
Socket file to use for connection.
.IP "\-\-stalk" 4
.IX Item "--stalk"
default: yes; negatable: yes
.Sp
Watch the server and wait for the trigger to occur.  Specify \f(CW\*(C`\-\-no\-stalk\*(C'\fR
to collect diagnostic data immediately, that is, without waiting for the
trigger to occur.  You probably also want to specify values for
\&\*(L"\-\-interval\*(R", \*(L"\-\-iterations\*(R", and \*(L"\-\-sleep\*(R".  For example, to
immediately collect data for 1 minute then exit, specify:
.Sp
.Vb 1
\&   \-\-no\-stalk \-\-run\-time 60 \-\-iterations 1
.Ve
.Sp
\&\*(L"\-\-cycles\*(R", \*(L"\-\-daemonize\*(R", \*(L"\-\-log\*(R" and \*(L"\-\-pid\*(R" have no effect
with \f(CW\*(C`\-\-no\-stalk\*(C'\fR.  Safeguard options, like \*(L"\-\-disk\-bytes\-free\*(R" and
\&\*(L"\-\-disk\-pct\-free\*(R", are still respected.
.Sp
See also \*(L"\-\-collect\*(R".
.IP "\-\-threshold" 4
.IX Item "--threshold"
type: int; default: 25
.Sp
The maximum acceptable value for \*(L"\-\-variable\*(R".  \*(L"\-\-collect\*(R" is
triggered when the value of \*(L"\-\-variable\*(R" is greater than \*(L"\-\-threshold\*(R"
for \*(L"\-\-cycles\*(R" many times.  Currently, there is no way to define a lower
threshold to check for a \*(L"\-\-variable\*(R" value that is too low.
.Sp
See also \*(L"\-\-function\*(R".
.IP "\-\-user" 4
.IX Item "--user"
short form: \-u; type: string
.Sp
User for login if not current user.
.IP "\-\-variable" 4
.IX Item "--variable"
type: string; default: Threads_running
.Sp
The variable to compare against \*(L"\-\-threshold\*(R".  See also \*(L"\-\-function\*(R".
.IP "\-\-verbose" 4
.IX Item "--verbose"
type: int; default: 2
.Sp
Print more or less information while running.  Since the tool is designed
to be a long-running daemon, the default verbosity level only prints the
most important information.  If you run the tool interactively, you may
want to use a higher verbosity level.
.Sp
.Vb 6
\&  LEVEL PRINTS
\&  ===== =====================================
\&  0     Errors
\&  1     Warnings
\&  2     Matching triggers and collection info
\&  3     Non\-matching triggers
.Ve
.IP "\-\-version" 4
.IX Item "--version"
Print tool's version and exit.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
This tool does not require any environment variables for configuration,
although it can be influenced to work differently by through several
variables.  Keep in mind that these are expert settings, and should not
be used in most cases.
.PP
Specifically, the variables that can be set are:
.IP "\s-1CMD_GDB\s0" 4
.IX Item "CMD_GDB"
.PD 0
.IP "\s-1CMD_IOSTAT\s0" 4
.IX Item "CMD_IOSTAT"
.IP "\s-1CMD_MPSTAT\s0" 4
.IX Item "CMD_MPSTAT"
.IP "\s-1CMD_MYSQL\s0" 4
.IX Item "CMD_MYSQL"
.IP "\s-1CMD_MYSQLADMIN\s0" 4
.IX Item "CMD_MYSQLADMIN"
.IP "\s-1CMD_OPCONTROL\s0" 4
.IX Item "CMD_OPCONTROL"
.IP "\s-1CMD_OPREPORT\s0" 4
.IX Item "CMD_OPREPORT"
.IP "\s-1CMD_PMAP\s0" 4
.IX Item "CMD_PMAP"
.IP "\s-1CMD_STRACE\s0" 4
.IX Item "CMD_STRACE"
.IP "\s-1CMD_SYSCTL\s0" 4
.IX Item "CMD_SYSCTL"
.IP "\s-1CMD_TCPDUMP\s0" 4
.IX Item "CMD_TCPDUMP"
.IP "\s-1CMD_VMSTAT\s0" 4
.IX Item "CMD_VMSTAT"
.PD
.PP
For example, during collection iostat is called with a \-dx argument, but
because you have an \s-1NFS\s0 partition, you also need the \-n flag there.  Instead
of editing the source, you can call pt-stalk as
.PP
.Vb 1
\&    CMD_IOSTAT="iostat \-n" pt\-stalk ...
.Ve
.PP
which will do exactly what you need.  Combined with the plugin hooks, this
gives you a fine-grained control of what the tool does.
.SH "SYSTEM REQUIREMENTS"
.IX Header "SYSTEM REQUIREMENTS"
This tool requires Bash v3 or newer.  Certain options require other programs:
.ie n .IP """\-\-collect\-gdb"" requires ""gdb""" 4
.el .IP "``\-\-collect\-gdb'' requires \f(CWgdb\fR" 4
.IX Item "--collect-gdb requires gdb"
.PD 0
.ie n .IP """\-\-collect\-oprofile"" requires ""opcontrol"" and ""opreport""" 4
.el .IP "``\-\-collect\-oprofile'' requires \f(CWopcontrol\fR and \f(CWopreport\fR" 4
.IX Item "--collect-oprofile requires opcontrol and opreport"
.ie n .IP """\-\-collect\-strace"" requires ""strace""" 4
.el .IP "``\-\-collect\-strace'' requires \f(CWstrace\fR" 4
.IX Item "--collect-strace requires strace"
.ie n .IP """\-\-collect\-tcpdump"" requires ""tcpdump""" 4
.el .IP "``\-\-collect\-tcpdump'' requires \f(CWtcpdump\fR" 4
.IX Item "--collect-tcpdump requires tcpdump"
.PD
.SH "BUGS"
.IX Header "BUGS"
For a list of known bugs, see <http://www.percona.com/bugs/pt\-stalk>.
.PP
Please report bugs at <https://bugs.launchpad.net/percona\-toolkit>.
Include the following information in your bug report:
.IP "\(bu" 4
Complete command-line used to run the tool
.IP "\(bu" 4
Tool \*(L"\-\-version\*(R"
.IP "\(bu" 4
MySQL version of all servers involved
.IP "\(bu" 4
Output from the tool including \s-1STDERR\s0
.IP "\(bu" 4
Input files (log/dump/config files, etc.)
.PP
If possible, include debugging output by running the tool with \f(CW\*(C`PTDEBUG\*(C'\fR;
see \*(L"\s-1ENVIRONMENT\*(R"\s0.
.SH "DOWNLOADING"
.IX Header "DOWNLOADING"
Visit <http://www.percona.com/software/percona\-toolkit/> to download the
latest release of Percona Toolkit.  Or, get the latest release from the
command line:
.PP
.Vb 1
\&   wget percona.com/get/percona\-toolkit.tar.gz
\&
\&   wget percona.com/get/percona\-toolkit.rpm
\&
\&   wget percona.com/get/percona\-toolkit.deb
.Ve
.PP
You can also get individual tools from the latest release:
.PP
.Vb 1
\&   wget percona.com/get/TOOL
.Ve
.PP
Replace \f(CW\*(C`TOOL\*(C'\fR with the name of any tool.
.SH "AUTHORS"
.IX Header "AUTHORS"
Baron Schwartz, Justin Swanhart, Fernando Ipar, Daniel Nichter,
and Brian Fraser
.SH "ABOUT PERCONA TOOLKIT"
.IX Header "ABOUT PERCONA TOOLKIT"
This tool is part of Percona Toolkit, a collection of advanced command-line
tools for MySQL developed by Percona.  Percona Toolkit was forked from two
projects in June, 2011: Maatkit and Aspersa.  Those projects were created by
Baron Schwartz and primarily developed by him and Daniel Nichter.  Visit
<http://www.percona.com/software/> to learn about other free, open-source
software from Percona.
.SH "COPYRIGHT, LICENSE, AND WARRANTY"
.IX Header "COPYRIGHT, LICENSE, AND WARRANTY"
This program is copyright 2011\-2016 Percona \s-1LLC\s0 and/or its affiliates,
2010\-2011 Baron Schwartz.
.PP
\&\s-1THIS PROGRAM IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation, version 2; \s-1OR\s0 the Perl Artistic License.  On \s-1UNIX\s0 and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA.\s0
.SH "VERSION"
.IX Header "VERSION"
pt-stalk 2.2.17
