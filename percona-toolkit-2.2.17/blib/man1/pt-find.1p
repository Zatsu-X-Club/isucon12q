.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PT-FIND 1p"
.TH PT-FIND 1p "2016-03-07" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pt\-find \- Find MySQL tables and execute actions, like GNU find.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage: pt-find [\s-1OPTIONS\s0] [\s-1DATABASES\s0]
.PP
pt-find searches for MySQL tables and executes actions, like \s-1GNU\s0 find.  The
default action is to print the database and table name.
.PP
Find all tables created more than a day ago, which use the MyISAM engine, and
print their names:
.PP
.Vb 1
\&  pt\-find \-\-ctime +1 \-\-engine MyISAM
.Ve
.PP
Find InnoDB tables and convert them to MyISAM:
.PP
.Vb 1
\&  pt\-find \-\-engine InnoDB \-\-exec "ALTER TABLE %D.%N ENGINE=MyISAM"
.Ve
.PP
Find tables created by a process that no longer exists, following the
name_sid_pid naming convention, and remove them.
.PP
.Vb 1
\&  pt\-find \-\-connection\-id \*(Aq\eD_\ed+_(\ed+)$\*(Aq \-\-server\-id \*(Aq\eD_(\ed+)_\ed+$\*(Aq \-\-exec\-plus "DROP TABLE %s"
.Ve
.PP
Find empty tables in the test and junk databases, and delete them:
.PP
.Vb 1
\&  pt\-find \-\-empty junk test \-\-exec\-plus "DROP TABLE %s"
.Ve
.PP
Find tables more than five gigabytes in total size:
.PP
.Vb 1
\&  pt\-find \-\-tablesize +5G
.Ve
.PP
Find all tables and print their total data and index size, and sort largest
tables first (sort is a different program, by the way).
.PP
.Vb 1
\&  pt\-find \-\-printf "%T\et%D.%N\en" | sort \-rn
.Ve
.PP
As above, but this time, insert the data back into the database for posterity:
.PP
.Vb 1
\&  pt\-find \-\-noquote \-\-exec "INSERT INTO sysdata.tblsize(db, tbl, size) VALUES(\*(Aq%D\*(Aq, \*(Aq%N\*(Aq, %T)"
.Ve
.SH "RISKS"
.IX Header "RISKS"
Percona Toolkit is mature, proven in the real world, and well tested,
but all database tools can pose a risk to the system and the database
server.  Before using this tool, please:
.IP "\(bu" 4
Read the tool's documentation
.IP "\(bu" 4
Review the tool's known \*(L"\s-1BUGS\*(R"\s0
.IP "\(bu" 4
Test the tool on a non-production server
.IP "\(bu" 4
Backup your production server and verify the backups
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
pt-find looks for MySQL tables that pass the tests you specify, and executes
the actions you specify.  The default action is to print the database and table
name to \s-1STDOUT.\s0
.PP
pt-find is simpler than \s-1GNU\s0 find.  It doesn't allow you to specify
complicated expressions on the command line.
.PP
pt-find uses \s-1SHOW TABLES\s0 when possible, and \s-1SHOW TABLE STATUS\s0 when needed.
.SH "OPTION TYPES"
.IX Header "OPTION TYPES"
There are three types of options: normal options, which determine some behavior
or setting; tests, which determine whether a table should be included in the
list of tables found; and actions, which do something to the tables pt-find
finds.
.PP
pt-find uses standard Getopt::Long option parsing, so you should use double
dashes in front of long option names, unlike \s-1GNU\s0 find.
.SH "OPTIONS"
.IX Header "OPTIONS"
This tool accepts additional command-line arguments.  Refer to the
\&\*(L"\s-1SYNOPSIS\*(R"\s0 and usage information for details.
.IP "\-\-ask\-pass" 4
.IX Item "--ask-pass"
Prompt for a password when connecting to MySQL.
.IP "\-\-case\-insensitive" 4
.IX Item "--case-insensitive"
Specifies that all regular expression searches are case-insensitive.
.IP "\-\-charset" 4
.IX Item "--charset"
short form: \-A; type: string
.Sp
Default character set.  If the value is utf8, sets Perl's binmode on
\&\s-1STDOUT\s0 to utf8, passes the mysql_enable_utf8 option to DBD::mysql, and runs \s-1SET
NAMES UTF8\s0 after connecting to MySQL.  Any other value sets binmode on \s-1STDOUT\s0
without the utf8 layer, and runs \s-1SET NAMES\s0 after connecting to MySQL.
.IP "\-\-config" 4
.IX Item "--config"
type: Array
.Sp
Read this comma-separated list of config files; if specified, this must be the
first option on the command line.
.IP "\-\-database" 4
.IX Item "--database"
short form: \-D; type: string
.Sp
Connect to this database.
.IP "\-\-day\-start" 4
.IX Item "--day-start"
Measure times (for \*(L"\-\-mmin\*(R", etc) from the beginning of today rather than
from the current time.
.IP "\-\-defaults\-file" 4
.IX Item "--defaults-file"
short form: \-F; type: string
.Sp
Only read mysql options from the given file.  You must give an absolute
pathname.
.IP "\-\-help" 4
.IX Item "--help"
Show help and exit.
.IP "\-\-host" 4
.IX Item "--host"
short form: \-h; type: string
.Sp
Connect to host.
.IP "\-\-or" 4
.IX Item "--or"
Combine tests with \s-1OR,\s0 not \s-1AND.\s0
.Sp
By default, tests are evaluated as though there were an \s-1AND\s0 between them.  This
option switches it to \s-1OR.\s0
.Sp
Option parsing is not implemented by pt-find itself, so you cannot specify
complicated expressions with parentheses and mixtures of \s-1OR\s0 and \s-1AND.\s0
.IP "\-\-password" 4
.IX Item "--password"
short form: \-p; type: string
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\-\-pid" 4
.IX Item "--pid"
type: string
.Sp
Create the given \s-1PID\s0 file.  The tool won't start if the \s-1PID\s0 file already
exists and the \s-1PID\s0 it contains is different than the current \s-1PID.\s0  However,
if the \s-1PID\s0 file exists and the \s-1PID\s0 it contains is no longer running, the
tool will overwrite the \s-1PID\s0 file with the current \s-1PID.\s0  The \s-1PID\s0 file is
removed automatically when the tool exits.
.IP "\-\-port" 4
.IX Item "--port"
short form: \-P; type: int
.Sp
Port number to use for connection.
.IP "\-\-[no]quote" 4
.IX Item "--[no]quote"
default: yes
.Sp
Quotes MySQL identifier names with MySQL's standard backtick character.
.Sp
Quoting happens after tests are run, and before actions are run.
.IP "\-\-set\-vars" 4
.IX Item "--set-vars"
type: Array
.Sp
Set the MySQL variables in this comma-separated list of \f(CW\*(C`variable=value\*(C'\fR pairs.
.Sp
By default, the tool sets:
.Sp
.Vb 1
\&   wait_timeout=10000
.Ve
.Sp
Variables specified on the command line override these defaults.  For
example, specifying \f(CW\*(C`\-\-set\-vars wait_timeout=500\*(C'\fR overrides the defaultvalue of \f(CW10000\fR.
.Sp
The tool prints a warning and continues if a variable cannot be set.
.IP "\-\-socket" 4
.IX Item "--socket"
short form: \-S; type: string
.Sp
Socket file to use for connection.
.IP "\-\-user" 4
.IX Item "--user"
short form: \-u; type: string
.Sp
User for login if not current user.
.IP "\-\-version" 4
.IX Item "--version"
Show version and exit.
.IP "\-\-[no]version\-check" 4
.IX Item "--[no]version-check"
default: yes
.Sp
Check for the latest version of Percona Toolkit, MySQL, and other programs.
.Sp
This is a standard \*(L"check for updates automatically\*(R" feature, with two
additional features.  First, the tool checks the version of other programs
on the local system in addition to its own version.  For example, it checks
the version of every MySQL server it connects to, Perl, and the Perl module
DBD::mysql.  Second, it checks for and warns about versions with known
problems.  For example, MySQL 5.5.25 had a critical bug and was re-released
as 5.5.25a.
.Sp
Any updates or known problems are printed to \s-1STDOUT\s0 before the tool's normal
output.  This feature should never interfere with the normal operation of the
tool.
.Sp
For more information, visit <https://www.percona.com/version\-check>.
.SS "\s-1TESTS\s0"
.IX Subsection "TESTS"
Most tests check some criterion against a column of \s-1SHOW TABLE STATUS\s0 output.
Numeric arguments can be specified as +n for greater than n, \-n for less than n,
and n for exactly n.  All numeric options can take an optional suffix multiplier
of k, M or G (1_024, 1_048_576, and 1_073_741_824 respectively).  All patterns
are Perl regular expressions (see 'man perlre') unless specified as \s-1SQL LIKE\s0
patterns.
.PP
Dates and times are all measured relative to the same instant, when pt-find
first asks the database server what time it is.  All date and time manipulation
is done in \s-1SQL,\s0 so if you say to find tables modified 5 days ago, that
translates to \s-1SELECT DATE_SUB\s0(\s-1CURRENT_TIMESTAMP, INTERVAL 5 DAY\s0).  If you
specify \*(L"\-\-day\-start\*(R", if course it's relative to \s-1CURRENT_DATE\s0 instead.
.PP
However, table sizes and other metrics are not consistent at an instant in
time.  It can take some time for MySQL to process all the \s-1SHOW\s0 queries, and
pt-find can't do anything about that.  These measurements are as of the
time they're taken.
.PP
If you need some test that's not in this list, file a bug report and I'll
enhance pt-find for you.  It's really easy.
.IP "\-\-autoinc" 4
.IX Item "--autoinc"
type: string; group: Tests
.Sp
Table's next \s-1AUTO_INCREMENT\s0 is n.  This tests the Auto_increment column.
.IP "\-\-avgrowlen" 4
.IX Item "--avgrowlen"
type: size; group: Tests
.Sp
Table avg row len is n bytes.  This tests the Avg_row_length column.
The specified size can be \*(L"\s-1NULL\*(R"\s0 to test where Avg_row_length \s-1IS NULL.\s0
.IP "\-\-checksum" 4
.IX Item "--checksum"
type: string; group: Tests
.Sp
Table checksum is n.  This tests the Checksum column.
.IP "\-\-cmin" 4
.IX Item "--cmin"
type: size; group: Tests
.Sp
Table was created n minutes ago.  This tests the Create_time column.
.IP "\-\-collation" 4
.IX Item "--collation"
type: string; group: Tests
.Sp
Table collation matches pattern.  This tests the Collation column.
.IP "\-\-column\-name" 4
.IX Item "--column-name"
type: string; group: Tests
.Sp
A column name in the table matches pattern.
.IP "\-\-column\-type" 4
.IX Item "--column-type"
type: string; group: Tests
.Sp
A column in the table matches this type (case-insensitive).
.Sp
Examples of types are: varchar, char, int, smallint, bigint, decimal, year,
timestamp, text, enum.
.IP "\-\-comment" 4
.IX Item "--comment"
type: string; group: Tests
.Sp
Table comment matches pattern.  This tests the Comment column.
.IP "\-\-connection\-id" 4
.IX Item "--connection-id"
type: string; group: Tests
.Sp
Table name has nonexistent MySQL connection \s-1ID.\s0  This tests the table name for
a pattern.  The argument to this test must be a Perl regular expression that
captures digits like this: (\ed+).  If the table name matches the pattern,
these captured digits are taken to be the MySQL connection \s-1ID\s0 of some process.
If the connection doesn't exist according to \s-1SHOW FULL PROCESSLIST,\s0 the test
returns true.  If the connection \s-1ID\s0 is greater than pt-find's own
connection \s-1ID,\s0 the test returns false for safety.
.Sp
Why would you want to do this?  If you use MySQL statement-based replication,
you probably know the trouble temporary tables can cause.  You might choose to
work around this by creating real tables with unique names, instead of
temporary tables.  One way to do this is to append your connection \s-1ID\s0 to the
end of the table, thusly: scratch_table_12345.  This assures the table name is
unique and lets you have a way to find which connection it was associated
with.  And perhaps most importantly, if the connection no longer exists, you
can assume the connection died without cleaning up its tables, and this table
is a candidate for removal.
.Sp
This is how I manage scratch tables, and that's why I included this test in
pt-find.
.Sp
The argument I use to \*(L"\-\-connection\-id\*(R" is \*(L"\eD_(\ed+)$\*(R".  That finds tables
with a series of numbers at the end, preceded by an underscore and some
non-number character (the latter criterion prevents me from examining tables
with a date at the end, which people tend to do: baron_scratch_2007_05_07 for
example).  It's better to keep the scratch tables separate of course.
.Sp
If you do this, make sure the user pt-find runs as has the \s-1PROCESS\s0 privilege!
Otherwise it will only see connections from the same user, and might think some
tables are ready to remove when they're still in use.  For safety, pt-find
checks this for you.
.Sp
See also \*(L"\-\-server\-id\*(R".
.IP "\-\-createopts" 4
.IX Item "--createopts"
type: string; group: Tests
.Sp
Table create option matches pattern.  This tests the Create_options column.
.IP "\-\-ctime" 4
.IX Item "--ctime"
type: size; group: Tests
.Sp
Table was created n days ago.  This tests the Create_time column.
.IP "\-\-datafree" 4
.IX Item "--datafree"
type: size; group: Tests
.Sp
Table has n bytes of free space.  This tests the Data_free column.
The specified size can be \*(L"\s-1NULL\*(R"\s0 to test where Data_free \s-1IS NULL.\s0
.IP "\-\-datasize" 4
.IX Item "--datasize"
type: size; group: Tests
.Sp
Table data uses n bytes of space.  This tests the Data_length column.
The specified size can be \*(L"\s-1NULL\*(R"\s0 to test where Data_length \s-1IS NULL.\s0
.IP "\-\-dblike" 4
.IX Item "--dblike"
type: string; group: Tests
.Sp
Database name matches \s-1SQL LIKE\s0 pattern.
.IP "\-\-dbregex" 4
.IX Item "--dbregex"
type: string; group: Tests
.Sp
Database name matches this pattern.
.IP "\-\-empty" 4
.IX Item "--empty"
group: Tests
.Sp
Table has no rows.  This tests the Rows column.
.IP "\-\-engine" 4
.IX Item "--engine"
type: string; group: Tests
.Sp
Table storage engine matches this pattern.  This tests the Engine column, or in
earlier versions of MySQL, the Type column.
.IP "\-\-function" 4
.IX Item "--function"
type: string; group: Tests
.Sp
Function definition matches pattern.
.IP "\-\-indexsize" 4
.IX Item "--indexsize"
type: size; group: Tests
.Sp
Table indexes use n bytes of space.  This tests the Index_length column.
The specified size can be \*(L"\s-1NULL\*(R"\s0 to test where Index_length \s-1IS NULL.\s0
.IP "\-\-kmin" 4
.IX Item "--kmin"
type: size; group: Tests
.Sp
Table was checked n minutes ago.  This tests the Check_time column.
.IP "\-\-ktime" 4
.IX Item "--ktime"
type: size; group: Tests
.Sp
Table was checked n days ago.  This tests the Check_time column.
.IP "\-\-mmin" 4
.IX Item "--mmin"
type: size; group: Tests
.Sp
Table was last modified n minutes ago.  This tests the Update_time column.
.IP "\-\-mtime" 4
.IX Item "--mtime"
type: size; group: Tests
.Sp
Table was last modified n days ago.  This tests the Update_time column.
.IP "\-\-procedure" 4
.IX Item "--procedure"
type: string; group: Tests
.Sp
Procedure definition matches pattern.
.IP "\-\-rowformat" 4
.IX Item "--rowformat"
type: string; group: Tests
.Sp
Table row format matches pattern.  This tests the Row_format column.
.IP "\-\-rows" 4
.IX Item "--rows"
type: size; group: Tests
.Sp
Table has n rows.  This tests the Rows column.
The specified size can be \*(L"\s-1NULL\*(R"\s0 to test where Rows \s-1IS NULL.\s0
.IP "\-\-server\-id" 4
.IX Item "--server-id"
type: string; group: Tests
.Sp
Table name contains the server \s-1ID.\s0  If you create temporary tables with the
naming convention explained in \*(L"\-\-connection\-id\*(R", but also add the server \s-1ID\s0 of the
server on which the tables are created, then you can use this pattern match to
ensure tables are dropped only on the server they're created on.  This prevents
a table from being accidentally dropped on a slave while it's in use (provided
that your server IDs are all unique, which they should be for replication to
work).
.Sp
For example, on the master (server \s-1ID 22\s0) you create a table called
scratch_table_22_12345.  If you see this table on the slave (server \s-1ID 23\s0), you
might think it can be dropped safely if there's no such connection 12345.  But
if you also force the name to match the server \s-1ID\s0 with \f(CW\*(C`\-\-server\-id \*(Aq\eD_(\ed+)_\ed+$\*(Aq\*(C'\fR,
the table won't be dropped on the slave.
.IP "\-\-tablesize" 4
.IX Item "--tablesize"
type: size; group: Tests
.Sp
Table uses n bytes of space.  This tests the sum of the Data_length and
Index_length columns.
.IP "\-\-tbllike" 4
.IX Item "--tbllike"
type: string; group: Tests
.Sp
Table name matches \s-1SQL LIKE\s0 pattern.
.IP "\-\-tblregex" 4
.IX Item "--tblregex"
type: string; group: Tests
.Sp
Table name matches this pattern.
.IP "\-\-tblversion" 4
.IX Item "--tblversion"
type: size; group: Tests
.Sp
Table version is n.  This tests the Version column.
.IP "\-\-trigger" 4
.IX Item "--trigger"
type: string; group: Tests
.Sp
Trigger action statement matches pattern.
.IP "\-\-trigger\-table" 4
.IX Item "--trigger-table"
type: string; group: Tests
.Sp
\&\*(L"\-\-trigger\*(R" is defined on table matching pattern.
.IP "\-\-view" 4
.IX Item "--view"
type: string; group: Tests
.Sp
\&\s-1CREATE VIEW\s0 matches this pattern.
.SS "\s-1ACTIONS\s0"
.IX Subsection "ACTIONS"
The \*(L"\-\-exec\-plus\*(R" action happens after everything else, but otherwise actions
happen in an indeterminate order.  If you need determinism, file a bug report
and I'll add this feature.
.IP "\-\-exec" 4
.IX Item "--exec"
type: string; group: Actions
.Sp
Execute this \s-1SQL\s0 with each item found.  The \s-1SQL\s0 can contain escapes and
formatting directives (see \*(L"\-\-printf\*(R").
.IP "\-\-exec\-dsn" 4
.IX Item "--exec-dsn"
type: string; group: Actions
.Sp
Specify a \s-1DSN\s0 in key-value format to use when executing \s-1SQL\s0 with \*(L"\-\-exec\*(R" and
\&\*(L"\-\-exec\-plus\*(R".  Any values not specified are inherited from command-line
arguments.
.IP "\-\-exec\-plus" 4
.IX Item "--exec-plus"
type: string; group: Actions
.Sp
Execute this \s-1SQL\s0 with all items at once.  This option is unlike \*(L"\-\-exec\*(R".  There
are no escaping or formatting directives; there is only one special placeholder
for the list of database and table names, \f(CW%s\fR.  The list of tables found will be
joined together with commas and substituted wherever you place \f(CW%s\fR.
.Sp
You might use this, for example, to drop all the tables you found:
.Sp
.Vb 1
\&   DROP TABLE %s
.Ve
.Sp
This is sort of like \s-1GNU\s0 find's \*(L"\-exec command {} +\*(R" syntax.  Only it's not
totally cryptic.  And it doesn't require me to write a command-line parser.
.IP "\-\-print" 4
.IX Item "--print"
group: Actions
.Sp
Print the database and table name, followed by a newline.  This is the default
action if no other action is specified.
.IP "\-\-printf" 4
.IX Item "--printf"
type: string; group: Actions
.Sp
Print format on the standard output, interpreting '\e' escapes and '%'
directives.  Escapes are backslashed characters, like \en and \et.  Perl
interprets these, so you can use any escapes Perl knows about.  Directives are
replaced by \f(CW%s\fR, and as of this writing, you can't add any special formatting
instructions, like field widths or alignment (though I'm musing over ways to do
that).
.Sp
Here is a list of the directives.  Note that most of them simply come from
columns of \s-1SHOW TABLE STATUS.\s0  If the column is \s-1NULL\s0 or doesn't exist, you get
an empty string in the output.  A % character followed by any character not in
the following list is discarded (but the other character is printed).
.Sp
.Vb 10
\&   CHAR DATA SOURCE        NOTES
\&   \-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&   a    Auto_increment
\&   A    Avg_row_length
\&   c    Checksum
\&   C    Create_time
\&   D    Database           The database name in which the table lives
\&   d    Data_length
\&   E    Engine             In older versions of MySQL, this is Type
\&   F    Data_free
\&   f    Innodb_free        Parsed from the Comment field
\&   I    Index_length
\&   K    Check_time
\&   L    Collation
\&   M    Max_data_length
\&   N    Name
\&   O    Comment
\&   P    Create_options
\&   R    Row_format
\&   S    Rows
\&   T    Table_length       Data_length+Index_length
\&   U    Update_time
\&   V    Version
.Ve
.SH "DSN OPTIONS"
.IX Header "DSN OPTIONS"
These \s-1DSN\s0 options are used to create a \s-1DSN.\s0  Each option is given like
\&\f(CW\*(C`option=value\*(C'\fR.  The options are case-sensitive, so P and p are not the
same option.  There cannot be whitespace before or after the \f(CW\*(C`=\*(C'\fR and
if the value contains whitespace it must be quoted.  \s-1DSN\s0 options are
comma-separated.  See the percona-toolkit manpage for full details.
.IP "\(bu" 4
A
.Sp
dsn: charset; copy: yes
.Sp
Default character set.
.IP "\(bu" 4
D
.Sp
dsn: database; copy: yes
.Sp
Default database.
.IP "\(bu" 4
F
.Sp
dsn: mysql_read_default_file; copy: yes
.Sp
Only read default options from the given file
.IP "\(bu" 4
h
.Sp
dsn: host; copy: yes
.Sp
Connect to host.
.IP "\(bu" 4
p
.Sp
dsn: password; copy: yes
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\(bu" 4
P
.Sp
dsn: port; copy: yes
.Sp
Port number to use for connection.
.IP "\(bu" 4
S
.Sp
dsn: mysql_socket; copy: yes
.Sp
Socket file to use for connection.
.IP "\(bu" 4
u
.Sp
dsn: user; copy: yes
.Sp
User for login if not current user.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The environment variable \f(CW\*(C`PTDEBUG\*(C'\fR enables verbose debugging output to \s-1STDERR.\s0
To enable debugging and capture all output to a file, run the tool like:
.PP
.Vb 1
\&   PTDEBUG=1 pt\-find ... > FILE 2>&1
.Ve
.PP
Be careful: debugging output is voluminous and can generate several megabytes
of output.
.SH "SYSTEM REQUIREMENTS"
.IX Header "SYSTEM REQUIREMENTS"
You need Perl, \s-1DBI,\s0 DBD::mysql, and some core packages that ought to be
installed in any reasonably new version of Perl.
.SH "BUGS"
.IX Header "BUGS"
For a list of known bugs, see <http://www.percona.com/bugs/pt\-find>.
.PP
Please report bugs at <https://bugs.launchpad.net/percona\-toolkit>.
Include the following information in your bug report:
.IP "\(bu" 4
Complete command-line used to run the tool
.IP "\(bu" 4
Tool \*(L"\-\-version\*(R"
.IP "\(bu" 4
MySQL version of all servers involved
.IP "\(bu" 4
Output from the tool including \s-1STDERR\s0
.IP "\(bu" 4
Input files (log/dump/config files, etc.)
.PP
If possible, include debugging output by running the tool with \f(CW\*(C`PTDEBUG\*(C'\fR;
see \*(L"\s-1ENVIRONMENT\*(R"\s0.
.SH "DOWNLOADING"
.IX Header "DOWNLOADING"
Visit <http://www.percona.com/software/percona\-toolkit/> to download the
latest release of Percona Toolkit.  Or, get the latest release from the
command line:
.PP
.Vb 1
\&   wget percona.com/get/percona\-toolkit.tar.gz
\&
\&   wget percona.com/get/percona\-toolkit.rpm
\&
\&   wget percona.com/get/percona\-toolkit.deb
.Ve
.PP
You can also get individual tools from the latest release:
.PP
.Vb 1
\&   wget percona.com/get/TOOL
.Ve
.PP
Replace \f(CW\*(C`TOOL\*(C'\fR with the name of any tool.
.SH "AUTHORS"
.IX Header "AUTHORS"
Baron Schwartz
.SH "ABOUT PERCONA TOOLKIT"
.IX Header "ABOUT PERCONA TOOLKIT"
This tool is part of Percona Toolkit, a collection of advanced command-line
tools for MySQL developed by Percona.  Percona Toolkit was forked from two
projects in June, 2011: Maatkit and Aspersa.  Those projects were created by
Baron Schwartz and primarily developed by him and Daniel Nichter.  Visit
<http://www.percona.com/software/> to learn about other free, open-source
software from Percona.
.SH "COPYRIGHT, LICENSE, AND WARRANTY"
.IX Header "COPYRIGHT, LICENSE, AND WARRANTY"
This program is copyright 2011\-2016 Percona \s-1LLC\s0 and/or its affiliates,
2007\-2011 Baron Schwartz.
.PP
\&\s-1THIS PROGRAM IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation, version 2; \s-1OR\s0 the Perl Artistic License.  On \s-1UNIX\s0 and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA.\s0
.SH "VERSION"
.IX Header "VERSION"
pt-find 2.2.17
