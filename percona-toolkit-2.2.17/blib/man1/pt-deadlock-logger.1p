.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PT-DEADLOCK-LOGGER 1p"
.TH PT-DEADLOCK-LOGGER 1p "2016-03-07" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pt\-deadlock\-logger \- Log MySQL deadlocks.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage: pt-deadlock-logger [\s-1OPTIONS\s0] \s-1DSN\s0
.PP
pt-deadlock-logger logs information about MySQL deadlocks on the given
\&\s-1DSN.\s0  Information is printed to \f(CW\*(C`STDOUT\*(C'\fR, and it can also be saved to a
table by specifying \*(L"\-\-dest\*(R".  The tool runs for forever unless
\&\*(L"\-\-run\-time\*(R" or \*(L"\-\-iterations\*(R" is specified.
.PP
Print deadlocks on host1:
.PP
.Vb 1
\&   pt\-deadlock\-logger h=host1
.Ve
.PP
Print deadlocks on host1 once then exit:
.PP
.Vb 1
\&   pt\-deadlock\-logger h=host1 \-\-iterations 1
.Ve
.PP
Save deadlocks on host1 to percona_schema.deadlocks on host2:
.PP
.Vb 1
\&  pt\-deadlock\-logger h=host1 \-\-dest h=host2,D=percona_schema,t=deadlocks
.Ve
.SH "RISKS"
.IX Header "RISKS"
Percona Toolkit is mature, proven in the real world, and well tested,
but all database tools can pose a risk to the system and the database
server.  Before using this tool, please:
.IP "\(bu" 4
Read the tool's documentation
.IP "\(bu" 4
Review the tool's known \*(L"\s-1BUGS\*(R"\s0
.IP "\(bu" 4
Test the tool on a non-production server
.IP "\(bu" 4
Backup your production server and verify the backups
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
pt-deadlock-logger prints information about MySQL deadlocks by polling
and parsing \f(CW\*(C`SHOW ENGINE INNODB STATUS\*(C'\fR.  When a new deadlock occurs,
it's printed to \f(CW\*(C`STDOUT\*(C'\fR and, if specified, saved to \*(L"\-\-dest\*(R".
.PP
Only new deadlocks are printed.  A fingerprint for each deadlock is created
using the deadlock's server, ts, and thread values (even if these
columns are not specified by \*(L"\-\-columns\*(R").  A deadlock is printed if
its fingerprint is different than the last deadlock's fingerprint.
.PP
The \*(L"\-\-dest\*(R" statement uses \f(CW\*(C`INSERT IGNORE\*(C'\fR to eliminate duplicate
deadlocks, so every deadlock is saved for every \*(L"\-\-iterations\*(R".
.SH "OUTPUT"
.IX Header "OUTPUT"
New deadlocks are printed to \f(CW\*(C`STDOUT\*(C'\fR, unless \*(L"\-\-quiet\*(R" is specified.
Errors and warnings are printed to \f(CW\*(C`STDERR\*(C'\fR.
.PP
See also \*(L"\-\-columns\*(R" and \*(L"\-\-tab\*(R".
.SH "INNODB CAVEATS AND DETAILS"
.IX Header "INNODB CAVEATS AND DETAILS"
InnoDB's output is hard to parse and sometimes there's no way to do it right.
.PP
Sometimes not all information (for example, username or \s-1IP\s0 address) is included
in the deadlock information.  In this case there's nothing for the tool to put
in those columns.  It may also be the case that the deadlock output is so long
(because there were a lot of locks) that the whole thing is truncated.
.PP
Though there are usually two transactions involved in a deadlock, there are more
locks than that; at a minimum, one more lock than transactions is necessary to
create a cycle in the waits-for graph.  pt-deadlock-logger prints the
transactions (always two in the InnoDB output, even when there are more
transactions in the waits-for graph than that) and fills in locks.  It prefers
waited-for over held when choosing lock information to output, but you can
figure out the rest with a moment's thought.  If you see one wait-for and one
held lock, you're looking at the same lock, so of course you'd prefer to see
both wait-for locks and get more information.  If the two waited-for locks are
not on the same table, more than two transactions were involved in the deadlock.
.PP
Finally, keep in mind that, because usernames with spaces are not quoted by
InnoDB, the tool will generally misreport the second word of these usernames
as the hostname.
.SH "OPTIONS"
.IX Header "OPTIONS"
This tool accepts additional command-line arguments.  Refer to the
\&\*(L"\s-1SYNOPSIS\*(R"\s0 and usage information for details.
.IP "\-\-ask\-pass" 4
.IX Item "--ask-pass"
Prompt for a password when connecting to MySQL.
.IP "\-\-charset" 4
.IX Item "--charset"
short form: \-A; type: string
.Sp
Default character set.  If the value is utf8, sets Perl's binmode on
\&\s-1STDOUT\s0 to utf8, passes the mysql_enable_utf8 option to DBD::mysql, and runs \s-1SET
NAMES UTF8\s0 after connecting to MySQL.  Any other value sets binmode on \s-1STDOUT\s0
without the utf8 layer, and runs \s-1SET NAMES\s0 after connecting to MySQL.
.IP "\-\-clear\-deadlocks" 4
.IX Item "--clear-deadlocks"
type: string
.Sp
Use this table to create a small deadlock.  This usually has the effect of
clearing out a huge deadlock, which otherwise consumes the entire output of
\&\f(CW\*(C`SHOW INNODB STATUS\*(C'\fR.  The table must not exist.  pt-deadlock-logger will
create it with the following structure:
.Sp
.Vb 3
\&  CREATE TABLE percona_schema.clear_deadlocks (
\&    a INT PRIMARY KEY
\&  ) ENGINE=InnoDB
.Ve
.Sp
After creating the table and causing a small deadlock, the tool will drop the
table again.
.IP "\-\-columns" 4
.IX Item "--columns"
type: Array; default: server, ts, thread, txn_id, txn_time, user, hostname, ip, db, tbl, idx, lock_type, lock_mode, wait_hold, victim, query
.Sp
The columns are:
.RS 4
.IP "server" 4
.IX Item "server"
The (source) server on which the deadlock occurred.  This might be useful if
you're tracking deadlocks on many servers.
.IP "ts" 4
.IX Item "ts"
The date and time of the last detected deadlock.
.IP "thread" 4
.IX Item "thread"
The MySQL thread number, which is the same as the connection \s-1ID\s0 in \s-1SHOW FULL
PROCESSLIST.\s0
.IP "txn_id" 4
.IX Item "txn_id"
The InnoDB transaction \s-1ID,\s0 which InnoDB expresses as two unsigned integers.  I
have multiplied them out to be one number.
.IP "txn_time" 4
.IX Item "txn_time"
How long the transaction was active when the deadlock happened.
.IP "user" 4
.IX Item "user"
The connection's database username.
.IP "hostname" 4
.IX Item "hostname"
The connection's host.
.IP "ip" 4
.IX Item "ip"
The connection's \s-1IP\s0 address.  If you specify \*(L"\-\-numeric\-ip\*(R", this is
converted to an unsigned integer.
.IP "db" 4
.IX Item "db"
The database in which the deadlock occurred.
.IP "tbl" 4
.IX Item "tbl"
The table on which the deadlock occurred.
.IP "idx" 4
.IX Item "idx"
The index on which the deadlock occurred.
.IP "lock_type" 4
.IX Item "lock_type"
The lock type the transaction held on the lock that caused the deadlock.
.IP "lock_mode" 4
.IX Item "lock_mode"
The lock mode of the lock that caused the deadlock.
.IP "wait_hold" 4
.IX Item "wait_hold"
Whether the transaction was waiting for the lock or holding the lock.  Usually
you will see the two waited-for locks.
.IP "victim" 4
.IX Item "victim"
Whether the transaction was selected as the deadlock victim and rolled back.
.IP "query" 4
.IX Item "query"
The query that caused the deadlock.
.RE
.RS 4
.RE
.IP "\-\-config" 4
.IX Item "--config"
type: Array
.Sp
Read this comma-separated list of config files; if specified, this must be the
first option on the command line.
.IP "\-\-create\-dest\-table" 4
.IX Item "--create-dest-table"
Create the table specified by \*(L"\-\-dest\*(R".
.Sp
Normally the \*(L"\-\-dest\*(R" table is expected to exist already.  This option
causes pt-deadlock-logger to create the table automatically using the suggested
table structure.
.IP "\-\-daemonize" 4
.IX Item "--daemonize"
Fork to the background and detach from the shell.  \s-1POSIX\s0 operating systems only.
.IP "\-\-database" 4
.IX Item "--database"
short form: \-D; type: string
.Sp
Connect to this database.
.IP "\-\-defaults\-file" 4
.IX Item "--defaults-file"
short form: \-F; type: string
.Sp
Only read mysql options from the given file.  You must give an absolute
pathname.
.IP "\-\-dest" 4
.IX Item "--dest"
type: \s-1DSN\s0
.Sp
\&\s-1DSN\s0 for where to store deadlocks; specify at least a database (D) and table (t).
.Sp
Missing values are filled in with the same values from the source host, so you
can usually omit most parts of this argument if you're storing deadlocks on the
same server on which they happen.
.Sp
The following table structure is suggested if you want to store all the
information pt-deadlock-logger can extract about deadlocks:
.Sp
.Vb 10
\& CREATE TABLE deadlocks (
\&   server char(20) NOT NULL,
\&   ts timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
\&   thread int unsigned NOT NULL,
\&   txn_id bigint unsigned NOT NULL,
\&   txn_time smallint unsigned NOT NULL,
\&   user char(16) NOT NULL,
\&   hostname char(20) NOT NULL,
\&   ip char(15) NOT NULL, \-\- alternatively, ip int unsigned NOT NULL
\&   db char(64) NOT NULL,
\&   tbl char(64) NOT NULL,
\&   idx char(64) NOT NULL,
\&   lock_type char(16) NOT NULL,
\&   lock_mode char(1) NOT NULL,
\&   wait_hold char(1) NOT NULL,
\&   victim tinyint unsigned NOT NULL,
\&   query text NOT NULL,
\&   PRIMARY KEY  (server,ts,thread)
\& ) ENGINE=InnoDB
.Ve
.Sp
If you use \*(L"\-\-columns\*(R", you can omit whichever columns you don't want to
store.
.IP "\-\-help" 4
.IX Item "--help"
Show help and exit.
.IP "\-\-host" 4
.IX Item "--host"
short form: \-h; type: string
.Sp
Connect to host.
.IP "\-\-interval" 4
.IX Item "--interval"
type: time; default: 30
.Sp
How often to check for deadlocks.  If no \*(L"\-\-run\-time\*(R" is specified,
pt-deadlock-logger runs forever, checking for deadlocks at every interval.
See also \*(L"\-\-run\-time\*(R".
.IP "\-\-iterations" 4
.IX Item "--iterations"
type: int
.Sp
How many times to check for deadlocks.  By default, this option
is undefined which means an infinite number of iterations.  The tool always
exits for \*(L"\-\-run\-time\*(R", regardless of the value specified for this option.
For example, the tool will exit after 1 minute with
\&\f(CW\*(C`\-\-run\-time 1m \-\-iterations 4 \-\-interval 30\*(C'\fR because 4 iterations at 30
second intervals would take 2 minutes, longer than the 1 mintue run-time.
.IP "\-\-log" 4
.IX Item "--log"
type: string
.Sp
Print all output to this file when daemonized.
.IP "\-\-numeric\-ip" 4
.IX Item "--numeric-ip"
Express \s-1IP\s0 addresses as integers.
.IP "\-\-password" 4
.IX Item "--password"
short form: \-p; type: string
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\-\-pid" 4
.IX Item "--pid"
type: string
.Sp
Create the given \s-1PID\s0 file.  The tool won't start if the \s-1PID\s0 file already
exists and the \s-1PID\s0 it contains is different than the current \s-1PID.\s0  However,
if the \s-1PID\s0 file exists and the \s-1PID\s0 it contains is no longer running, the
tool will overwrite the \s-1PID\s0 file with the current \s-1PID.\s0  The \s-1PID\s0 file is
removed automatically when the tool exits.
.IP "\-\-port" 4
.IX Item "--port"
short form: \-P; type: int
.Sp
Port number to use for connection.
.IP "\-\-quiet" 4
.IX Item "--quiet"
Do not deadlocks; only print errors and warnings to \f(CW\*(C`STDERR\*(C'\fR.
.IP "\-\-run\-time" 4
.IX Item "--run-time"
type: time
.Sp
How long to run before exiting.  By default pt-deadlock-logger runs forever,
checking for deadlocks every \*(L"\-\-interval\*(R" seconds.
.IP "\-\-set\-vars" 4
.IX Item "--set-vars"
type: Array
.Sp
Set the MySQL variables in this comma-separated list of \f(CW\*(C`variable=value\*(C'\fR pairs.
.Sp
By default, the tool sets:
.Sp
.Vb 1
\&   wait_timeout=10000
.Ve
.Sp
Variables specified on the command line override these defaults.  For
example, specifying \f(CW\*(C`\-\-set\-vars wait_timeout=500\*(C'\fR overrides the defaultvalue of \f(CW10000\fR.
.Sp
The tool prints a warning and continues if a variable cannot be set.
.IP "\-\-socket" 4
.IX Item "--socket"
short form: \-S; type: string
.Sp
Socket file to use for connection.
.IP "\-\-tab" 4
.IX Item "--tab"
Use tabs to separate columns instead of spaces.
.IP "\-\-user" 4
.IX Item "--user"
short form: \-u; type: string
.Sp
User for login if not current user.
.IP "\-\-version" 4
.IX Item "--version"
Show version and exit.
.IP "\-\-[no]version\-check" 4
.IX Item "--[no]version-check"
default: yes
.Sp
Check for the latest version of Percona Toolkit, MySQL, and other programs.
.Sp
This is a standard \*(L"check for updates automatically\*(R" feature, with two
additional features.  First, the tool checks the version of other programs
on the local system in addition to its own version.  For example, it checks
the version of every MySQL server it connects to, Perl, and the Perl module
DBD::mysql.  Second, it checks for and warns about versions with known
problems.  For example, MySQL 5.5.25 had a critical bug and was re-released
as 5.5.25a.
.Sp
Any updates or known problems are printed to \s-1STDOUT\s0 before the tool's normal
output.  This feature should never interfere with the normal operation of the
tool.
.Sp
For more information, visit <https://www.percona.com/version\-check>.
.SH "DSN OPTIONS"
.IX Header "DSN OPTIONS"
These \s-1DSN\s0 options are used to create a \s-1DSN.\s0  Each option is given like
\&\f(CW\*(C`option=value\*(C'\fR.  The options are case-sensitive, so P and p are not the
same option.  There cannot be whitespace before or after the \f(CW\*(C`=\*(C'\fR and
if the value contains whitespace it must be quoted.  \s-1DSN\s0 options are
comma-separated.  See the percona-toolkit manpage for full details.
.IP "\(bu" 4
A
.Sp
dsn: charset; copy: yes
.Sp
Default character set.
.IP "\(bu" 4
D
.Sp
dsn: database; copy: yes
.Sp
Default database.
.IP "\(bu" 4
F
.Sp
dsn: mysql_read_default_file; copy: yes
.Sp
Only read default options from the given file
.IP "\(bu" 4
h
.Sp
dsn: host; copy: yes
.Sp
Connect to host.
.IP "\(bu" 4
p
.Sp
dsn: password; copy: yes
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\(bu" 4
P
.Sp
dsn: port; copy: yes
.Sp
Port number to use for connection.
.IP "\(bu" 4
S
.Sp
dsn: mysql_socket; copy: yes
.Sp
Socket file to use for connection.
.IP "\(bu" 4
t
.Sp
Table in which to store deadlock information.
.IP "\(bu" 4
u
.Sp
dsn: user; copy: yes
.Sp
User for login if not current user.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The environment variable \f(CW\*(C`PTDEBUG\*(C'\fR enables verbose debugging output to \s-1STDERR.\s0
To enable debugging and capture all output to a file, run the tool like:
.PP
.Vb 1
\&   PTDEBUG=1 pt\-deadlock\-logger ... > FILE 2>&1
.Ve
.PP
Be careful: debugging output is voluminous and can generate several megabytes
of output.
.SH "SYSTEM REQUIREMENTS"
.IX Header "SYSTEM REQUIREMENTS"
You need Perl, \s-1DBI,\s0 DBD::mysql, and some core packages that ought to be
installed in any reasonably new version of Perl.
.SH "BUGS"
.IX Header "BUGS"
For a list of known bugs, see <http://www.percona.com/bugs/pt\-deadlock\-logger>.
.PP
Please report bugs at <https://bugs.launchpad.net/percona\-toolkit>.
Include the following information in your bug report:
.IP "\(bu" 4
Complete command-line used to run the tool
.IP "\(bu" 4
Tool \*(L"\-\-version\*(R"
.IP "\(bu" 4
MySQL version of all servers involved
.IP "\(bu" 4
Output from the tool including \s-1STDERR\s0
.IP "\(bu" 4
Input files (log/dump/config files, etc.)
.PP
If possible, include debugging output by running the tool with \f(CW\*(C`PTDEBUG\*(C'\fR;
see \*(L"\s-1ENVIRONMENT\*(R"\s0.
.SH "DOWNLOADING"
.IX Header "DOWNLOADING"
Visit <http://www.percona.com/software/percona\-toolkit/> to download the
latest release of Percona Toolkit.  Or, get the latest release from the
command line:
.PP
.Vb 1
\&   wget percona.com/get/percona\-toolkit.tar.gz
\&
\&   wget percona.com/get/percona\-toolkit.rpm
\&
\&   wget percona.com/get/percona\-toolkit.deb
.Ve
.PP
You can also get individual tools from the latest release:
.PP
.Vb 1
\&   wget percona.com/get/TOOL
.Ve
.PP
Replace \f(CW\*(C`TOOL\*(C'\fR with the name of any tool.
.SH "AUTHORS"
.IX Header "AUTHORS"
Baron Schwartz and Daniel Nichter
.SH "ABOUT PERCONA TOOLKIT"
.IX Header "ABOUT PERCONA TOOLKIT"
This tool is part of Percona Toolkit, a collection of advanced command-line
tools for MySQL developed by Percona.  Percona Toolkit was forked from two
projects in June, 2011: Maatkit and Aspersa.  Those projects were created by
Baron Schwartz and primarily developed by him and Daniel Nichter.  Visit
<http://www.percona.com/software/> to learn about other free, open-source
software from Percona.
.SH "COPYRIGHT, LICENSE, AND WARRANTY"
.IX Header "COPYRIGHT, LICENSE, AND WARRANTY"
This program is copyright 2011\-2016 Percona \s-1LLC\s0 and/or its affiliates,
2007\-2011 Baron Schwartz.
.PP
\&\s-1THIS PROGRAM IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation, version 2; \s-1OR\s0 the Perl Artistic License.  On \s-1UNIX\s0 and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA.\s0
.SH "VERSION"
.IX Header "VERSION"
pt-deadlock-logger 2.2.17
