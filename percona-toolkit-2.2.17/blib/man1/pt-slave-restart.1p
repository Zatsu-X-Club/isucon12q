.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PT-SLAVE-RESTART 1p"
.TH PT-SLAVE-RESTART 1p "2016-03-07" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pt\-slave\-restart \- Watch and restart MySQL replication after errors.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage: pt-slave-restart [\s-1OPTIONS\s0] [\s-1DSN\s0]
.PP
pt-slave-restart watches one or more MySQL replication slaves for
errors, and tries to restart replication if it stops.
.SH "RISKS"
.IX Header "RISKS"
Percona Toolkit is mature, proven in the real world, and well tested,
but all database tools can pose a risk to the system and the database
server.  Before using this tool, please:
.IP "\(bu" 4
Read the tool's documentation
.IP "\(bu" 4
Review the tool's known \*(L"\s-1BUGS\*(R"\s0
.IP "\(bu" 4
Test the tool on a non-production server
.IP "\(bu" 4
Backup your production server and verify the backups
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
pt-slave-restart watches one or more MySQL replication slaves and tries to skip
statements that cause errors.  It polls slaves intelligently with an
exponentially varying sleep time.  You can specify errors to skip and run the
slaves until a certain binlog position.
.PP
Although this tool can help a slave advance past errors, you should not
rely on it to \*(L"fix\*(R" replication.  If slave errors occur frequently or
unexpectedly, you should identify and fix the root cause.
.SH "OUTPUT"
.IX Header "OUTPUT"
If you specify \*(L"\-\-verbose\*(R", pt-slave-restart prints a line every time it sees
the slave has an error.  See \*(L"\-\-verbose\*(R" for details.
.SH "SLEEP"
.IX Header "SLEEP"
pt-slave-restart sleeps intelligently between polling the slave.  The current
sleep time varies.
.IP "\(bu" 4
The initial sleep time is given by \*(L"\-\-sleep\*(R".
.IP "\(bu" 4
If it checks and finds an error, it halves the previous sleep time.
.IP "\(bu" 4
If it finds no error, it doubles the previous sleep time.
.IP "\(bu" 4
The sleep time is bounded below by \*(L"\-\-min\-sleep\*(R" and above by
\&\*(L"\-\-max\-sleep\*(R".
.IP "\(bu" 4
Immediately after finding an error, pt-slave-restart assumes another error is
very likely to happen next, so it sleeps the current sleep time or the initial
sleep time, whichever is less.
.SH "GLOBAL TRANSACTION IDS"
.IX Header "GLOBAL TRANSACTION IDS"
As of Percona Toolkit 2.2.8, pt-slave-restart supports Global Transaction IDs
introduced in MySQL 5.6.5.  It's important to keep in mind that:
.IP "\(bu" 4
pt-slave-restart will not skip transactions when multiple replication threads
are being used (slave_parallel_workers > 0).  pt-slave-restart does not know
what the \s-1GTID\s0 event is of the failed transaction of a specific slave thread.
.IP "\(bu" 4
The default behavior is to skip the next transaction from the slave's master.
Writes can originate on different servers, each with their own \s-1UUID.\s0
.Sp
See \*(L"\-\-master\-uuid\*(R".
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
An exit status of 0 (sometimes also called a return value or return code)
indicates success.  Any other value represents the exit status of the Perl
process itself, or of the last forked process that exited if there were multiple
servers to monitor.
.SH "COMPATIBILITY"
.IX Header "COMPATIBILITY"
pt-slave-restart should work on many versions of MySQL.  Lettercase of many
output columns from \s-1SHOW SLAVE STATUS\s0 has changed over time, so it treats them
all as lowercase.
.SH "OPTIONS"
.IX Header "OPTIONS"
This tool accepts additional command-line arguments.  Refer to the
\&\*(L"\s-1SYNOPSIS\*(R"\s0 and usage information for details.
.IP "\-\-always" 4
.IX Item "--always"
Start slaves even when there is no error.  With this option enabled,
pt-slave-restart will not let you stop the slave manually if you want to!
.IP "\-\-ask\-pass" 4
.IX Item "--ask-pass"
Prompt for a password when connecting to MySQL.
.IP "\-\-charset" 4
.IX Item "--charset"
short form: \-A; type: string
.Sp
Default character set.  If the value is utf8, sets Perl's binmode on
\&\s-1STDOUT\s0 to utf8, passes the mysql_enable_utf8 option to DBD::mysql, and
runs \s-1SET NAMES UTF8\s0 after connecting to MySQL.  Any other value sets
binmode on \s-1STDOUT\s0 without the utf8 layer, and runs \s-1SET NAMES\s0 after
connecting to MySQL.
.IP "\-\-[no]check\-relay\-log" 4
.IX Item "--[no]check-relay-log"
default: yes
.Sp
Check the last relay log file and position before checking for slave errors.
.Sp
By default pt-slave-restart will not doing anything (it will just sleep)
if neither the relay log file nor the relay log position have changed since
the last check.  This prevents infinite loops (i.e. restarting the same
error in the same relay log file at the same relay log position).
.Sp
For certain slave errors, however, this check needs to be disabled by
specifying \f(CW\*(C`\-\-no\-check\-relay\-log\*(C'\fR.  Do not do this unless you know what
you are doing!
.IP "\-\-config" 4
.IX Item "--config"
type: Array
.Sp
Read this comma-separated list of config files; if specified, this must be the
first option on the command line.
.IP "\-\-daemonize" 4
.IX Item "--daemonize"
Fork to the background and detach from the shell.  \s-1POSIX\s0
operating systems only.
.IP "\-\-database" 4
.IX Item "--database"
short form: \-D; type: string
.Sp
Database to use.
.IP "\-\-defaults\-file" 4
.IX Item "--defaults-file"
short form: \-F; type: string
.Sp
Only read mysql options from the given file.  You must give an absolute
pathname.
.IP "\-\-error\-length" 4
.IX Item "--error-length"
type: int
.Sp
Max length of error message to print.  When \*(L"\-\-verbose\*(R" is set high enough to
print the error, this option will truncate the error text to the specified
length.  This can be useful to prevent wrapping on the terminal.
.IP "\-\-error\-numbers" 4
.IX Item "--error-numbers"
type: hash
.Sp
Only restart this comma-separated list of errors.  Makes pt-slave-restart only
try to restart if the error number is in this comma-separated list of errors.
If it sees an error not in the list, it will exit.
.Sp
The error number is in the \f(CW\*(C`last_errno\*(C'\fR column of \f(CW\*(C`SHOW SLAVE STATUS\*(C'\fR.
.IP "\-\-error\-text" 4
.IX Item "--error-text"
type: string
.Sp
Only restart errors that match this pattern.  A Perl regular expression against
which the error text, if any, is matched.  If the error text exists and matches,
pt-slave-restart will try to restart the slave.  If it exists but doesn't match,
pt-slave-restart will exit.
.Sp
The error text is in the \f(CW\*(C`last_error\*(C'\fR column of \f(CW\*(C`SHOW SLAVE STATUS\*(C'\fR.
.IP "\-\-help" 4
.IX Item "--help"
Show help and exit.
.IP "\-\-host" 4
.IX Item "--host"
short form: \-h; type: string
.Sp
Connect to host.
.IP "\-\-log" 4
.IX Item "--log"
type: string
.Sp
Print all output to this file when daemonized.
.IP "\-\-max\-sleep" 4
.IX Item "--max-sleep"
type: float; default: 64
.Sp
Maximum sleep seconds.
.Sp
The maximum time pt-slave-restart will sleep before polling the slave again.
This is also the time that pt-slave-restart will wait for all other running
instances to quit if both \*(L"\-\-stop\*(R" and \*(L"\-\-monitor\*(R" are specified.
.Sp
See \*(L"\s-1SLEEP\*(R"\s0.
.IP "\-\-min\-sleep" 4
.IX Item "--min-sleep"
type: float; default: 0.015625
.Sp
The minimum time pt-slave-restart will sleep before polling the slave again.
See \*(L"\s-1SLEEP\*(R"\s0.
.IP "\-\-monitor" 4
.IX Item "--monitor"
Whether to monitor the slave (default).  Unless you specify \-\-monitor
explicitly, \*(L"\-\-stop\*(R" will disable it.
.IP "\-\-password" 4
.IX Item "--password"
short form: \-p; type: string
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\-\-pid" 4
.IX Item "--pid"
type: string
.Sp
Create the given \s-1PID\s0 file.  The tool won't start if the \s-1PID\s0 file already
exists and the \s-1PID\s0 it contains is different than the current \s-1PID.\s0  However,
if the \s-1PID\s0 file exists and the \s-1PID\s0 it contains is no longer running, the
tool will overwrite the \s-1PID\s0 file with the current \s-1PID.\s0  The \s-1PID\s0 file is
removed automatically when the tool exits.
.IP "\-\-port" 4
.IX Item "--port"
short form: \-P; type: int
.Sp
Port number to use for connection.
.IP "\-\-quiet" 4
.IX Item "--quiet"
short form: \-q
.Sp
Suppresses normal output (disables \*(L"\-\-verbose\*(R").
.IP "\-\-recurse" 4
.IX Item "--recurse"
type: int; default: 0
.Sp
Watch slaves of the specified server, up to the specified number of servers deep
in the hierarchy.  The default depth of 0 means \*(L"just watch the slave
specified.\*(R"
.Sp
pt-slave-restart examines \f(CW\*(C`SHOW PROCESSLIST\*(C'\fR and tries to determine which
connections are from slaves, then connect to them.  See \*(L"\-\-recursion\-method\*(R".
.Sp
Recursion works by finding all slaves when the program starts, then watching
them.  If there is more than one slave, \f(CW\*(C`pt\-slave\-restart\*(C'\fR uses \f(CW\*(C`fork()\*(C'\fR to
monitor them.
.Sp
This also works if you have configured your slaves to show up in \f(CW\*(C`SHOW SLAVE
HOSTS\*(C'\fR.  The minimal configuration for this is the \f(CW\*(C`report_host\*(C'\fR parameter, but
there are other \*(L"report\*(R" parameters as well for the port, username, and
password.
.IP "\-\-recursion\-method" 4
.IX Item "--recursion-method"
type: array; default: processlist,hosts
.Sp
Preferred recursion method used to find slaves.
.Sp
Possible methods are:
.Sp
.Vb 5
\&  METHOD       USES
\&  ===========  ==================
\&  processlist  SHOW PROCESSLIST
\&  hosts        SHOW SLAVE HOSTS
\&  none         Do not find slaves
.Ve
.Sp
The processlist method is preferred because \s-1SHOW SLAVE HOSTS\s0 is not reliable.
However, the hosts method is required if the server uses a non-standard
port (not 3306).  Usually pt-slave-restart does the right thing and finds
the slaves, but you may give a preferred method and it will be used first.
If it doesn't find any slaves, the other methods will be tried.
.IP "\-\-run\-time" 4
.IX Item "--run-time"
type: time
.Sp
Time to run before exiting.  Causes pt-slave-restart to stop after the specified
time has elapsed.  Optional suffix: s=seconds, m=minutes, h=hours, d=days; if no
suffix, s is used.
.IP "\-\-sentinel" 4
.IX Item "--sentinel"
type: string; default: /tmp/pt\-slave\-restart\-sentinel
.Sp
Exit if this file exists.
.IP "\-\-set\-vars" 4
.IX Item "--set-vars"
type: Array
.Sp
Set the MySQL variables in this comma-separated list of \f(CW\*(C`variable=value\*(C'\fR pairs.
.Sp
By default, the tool sets:
.Sp
.Vb 1
\&   wait_timeout=10000
.Ve
.Sp
Variables specified on the command line override these defaults.  For
example, specifying \f(CW\*(C`\-\-set\-vars wait_timeout=500\*(C'\fR overrides the defaultvalue of \f(CW10000\fR.
.Sp
The tool prints a warning and continues if a variable cannot be set.
.IP "\-\-skip\-count" 4
.IX Item "--skip-count"
type: int; default: 1
.Sp
Number of statements to skip when restarting the slave.
.IP "\-\-master\-uuid" 4
.IX Item "--master-uuid"
type: string
.Sp
When using \s-1GTID,\s0 an empty transaction should be created in order to skip it.
If writes are coming from different nodes in the replication tree above, it is
not possible to know which event from which \s-1UUID\s0 to skip.
.Sp
By default, transactions from the slave's master (\f(CW\*(AqMaster_UUID\*(Aq\fR from
\&\f(CW\*(C`SHOW SLAVE STATUS\*(C'\fR) are skipped.
.Sp
For example, with
.Sp
.Vb 1
\&  master1 \-> slave1 \-> slave2
.Ve
.Sp
When skipping events on slave2 that were written to master1, you must specify
the \s-1UUID\s0 of master1, else the tool will use the \s-1UUID\s0 of slave1 by default.
.Sp
See \*(L"\s-1GLOBAL TRANSACTION IDS\*(R"\s0.
.IP "\-\-sleep" 4
.IX Item "--sleep"
type: int; default: 1
.Sp
Initial sleep seconds between checking the slave.
.Sp
See \*(L"\s-1SLEEP\*(R"\s0.
.IP "\-\-socket" 4
.IX Item "--socket"
short form: \-S; type: string
.Sp
Socket file to use for connection.
.IP "\-\-stop" 4
.IX Item "--stop"
Stop running instances by creating the sentinel file.
.Sp
Causes \f(CW\*(C`pt\-slave\-restart\*(C'\fR to create the sentinel file specified by
\&\*(L"\-\-sentinel\*(R".  This should have the effect of stopping all running
instances which are watching the same sentinel file.  If \*(L"\-\-monitor\*(R" isn't
specified, \f(CW\*(C`pt\-slave\-restart\*(C'\fR will exit after creating the file.  If it is
specified, \f(CW\*(C`pt\-slave\-restart\*(C'\fR will wait the interval given by
\&\*(L"\-\-max\-sleep\*(R", then remove the file and continue working.
.Sp
You might find this handy to stop cron jobs gracefully if necessary, or to
replace one running instance with another.  For example, if you want to stop
and restart \f(CW\*(C`pt\-slave\-restart\*(C'\fR every hour (just to make sure that it is
restarted every hour, in case of a server crash or some other problem), you
could use a \f(CW\*(C`crontab\*(C'\fR line like this:
.Sp
.Vb 1
\& 0 * * * * pt\-slave\-restart \-\-monitor \-\-stop \-\-sentinel /tmp/pt\-slave\-restartup
.Ve
.Sp
The non-default \*(L"\-\-sentinel\*(R" will make sure the hourly \f(CW\*(C`cron\*(C'\fR job stops
only instances previously started with the same options (that is, from the
same \f(CW\*(C`cron\*(C'\fR job).
.Sp
See also \*(L"\-\-sentinel\*(R".
.IP "\-\-until\-master" 4
.IX Item "--until-master"
type: string
.Sp
Run until this master log file and position.  Start the slave, and retry if it
fails, until it reaches the given replication coordinates.  The coordinates are
the logfile and position on the master, given by relay_master_log_file,
exec_master_log_pos.  The argument must be in the format \*(L"file,pos\*(R".  Separate
the filename and position with a single comma and no space.
.Sp
This will also cause an \s-1UNTIL\s0 clause to be given to \s-1START SLAVE.\s0
.Sp
After reaching this point, the slave should be stopped and pt-slave-restart
will exit.
.IP "\-\-until\-relay" 4
.IX Item "--until-relay"
type: string
.Sp
Run until this relay log file and position.  Like \*(L"\-\-until\-master\*(R", but in
the slave's relay logs instead.  The coordinates are given by relay_log_file,
relay_log_pos.
.IP "\-\-user" 4
.IX Item "--user"
short form: \-u; type: string
.Sp
User for login if not current user.
.IP "\-\-verbose" 4
.IX Item "--verbose"
short form: \-v; cumulative: yes; default: 1
.Sp
Be verbose; can specify multiple times.  Verbosity 1 outputs connection
information, a timestamp, relay_log_file, relay_log_pos, and last_errno.
Verbosity 2 adds last_error.  See also \*(L"\-\-error\-length\*(R".  Verbosity 3 prints
the current sleep time each time pt-slave-restart sleeps.
.IP "\-\-version" 4
.IX Item "--version"
Show version and exit.
.IP "\-\-[no]version\-check" 4
.IX Item "--[no]version-check"
default: yes
.Sp
Check for the latest version of Percona Toolkit, MySQL, and other programs.
.Sp
This is a standard \*(L"check for updates automatically\*(R" feature, with two
additional features.  First, the tool checks the version of other programs
on the local system in addition to its own version.  For example, it checks
the version of every MySQL server it connects to, Perl, and the Perl module
DBD::mysql.  Second, it checks for and warns about versions with known
problems.  For example, MySQL 5.5.25 had a critical bug and was re-released
as 5.5.25a.
.Sp
Any updates or known problems are printed to \s-1STDOUT\s0 before the tool's normal
output.  This feature should never interfere with the normal operation of the
tool.
.Sp
For more information, visit <https://www.percona.com/version\-check>.
.PP
Show version and exit.
.SH "DSN OPTIONS"
.IX Header "DSN OPTIONS"
These \s-1DSN\s0 options are used to create a \s-1DSN.\s0  Each option is given like
\&\f(CW\*(C`option=value\*(C'\fR.  The options are case-sensitive, so P and p are not the
same option.  There cannot be whitespace before or after the \f(CW\*(C`=\*(C'\fR and
if the value contains whitespace it must be quoted.  \s-1DSN\s0 options are
comma-separated.  See the percona-toolkit manpage for full details.
.IP "\(bu" 4
A
.Sp
dsn: charset; copy: yes
.Sp
Default character set.
.IP "\(bu" 4
D
.Sp
dsn: database; copy: yes
.Sp
Default database.
.IP "\(bu" 4
F
.Sp
dsn: mysql_read_default_file; copy: yes
.Sp
Only read default options from the given file
.IP "\(bu" 4
h
.Sp
dsn: host; copy: yes
.Sp
Connect to host.
.IP "\(bu" 4
p
.Sp
dsn: password; copy: yes
.Sp
Password to use when connecting.
If password contains commas they must be escaped with a backslash: \*(L"exam\e,ple\*(R"
.IP "\(bu" 4
P
.Sp
dsn: port; copy: yes
.Sp
Port number to use for connection.
.IP "\(bu" 4
S
.Sp
dsn: mysql_socket; copy: yes
.Sp
Socket file to use for connection.
.IP "\(bu" 4
u
.Sp
dsn: user; copy: yes
.Sp
User for login if not current user.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
The environment variable \f(CW\*(C`PTDEBUG\*(C'\fR enables verbose debugging output to \s-1STDERR.\s0
To enable debugging and capture all output to a file, run the tool like:
.PP
.Vb 1
\&   PTDEBUG=1 pt\-slave\-restart ... > FILE 2>&1
.Ve
.PP
Be careful: debugging output is voluminous and can generate several megabytes
of output.
.SH "SYSTEM REQUIREMENTS"
.IX Header "SYSTEM REQUIREMENTS"
You need Perl, \s-1DBI,\s0 DBD::mysql, and some core packages that ought to be
installed in any reasonably new version of Perl.
.SH "BUGS"
.IX Header "BUGS"
For a list of known bugs, see <http://www.percona.com/bugs/pt\-slave\-restart>.
.PP
Please report bugs at <https://bugs.launchpad.net/percona\-toolkit>.
Include the following information in your bug report:
.IP "\(bu" 4
Complete command-line used to run the tool
.IP "\(bu" 4
Tool \*(L"\-\-version\*(R"
.IP "\(bu" 4
MySQL version of all servers involved
.IP "\(bu" 4
Output from the tool including \s-1STDERR\s0
.IP "\(bu" 4
Input files (log/dump/config files, etc.)
.PP
If possible, include debugging output by running the tool with \f(CW\*(C`PTDEBUG\*(C'\fR;
see \*(L"\s-1ENVIRONMENT\*(R"\s0.
.SH "DOWNLOADING"
.IX Header "DOWNLOADING"
Visit <http://www.percona.com/software/percona\-toolkit/> to download the
latest release of Percona Toolkit.  Or, get the latest release from the
command line:
.PP
.Vb 1
\&   wget percona.com/get/percona\-toolkit.tar.gz
\&
\&   wget percona.com/get/percona\-toolkit.rpm
\&
\&   wget percona.com/get/percona\-toolkit.deb
.Ve
.PP
You can also get individual tools from the latest release:
.PP
.Vb 1
\&   wget percona.com/get/TOOL
.Ve
.PP
Replace \f(CW\*(C`TOOL\*(C'\fR with the name of any tool.
.SH "AUTHORS"
.IX Header "AUTHORS"
Baron Schwartz
.SH "ABOUT PERCONA TOOLKIT"
.IX Header "ABOUT PERCONA TOOLKIT"
This tool is part of Percona Toolkit, a collection of advanced command-line
tools for MySQL developed by Percona.  Percona Toolkit was forked from two
projects in June, 2011: Maatkit and Aspersa.  Those projects were created by
Baron Schwartz and primarily developed by him and Daniel Nichter.  Visit
<http://www.percona.com/software/> to learn about other free, open-source
software from Percona.
.SH "COPYRIGHT, LICENSE, AND WARRANTY"
.IX Header "COPYRIGHT, LICENSE, AND WARRANTY"
This program is copyright 2011\-2016 Percona \s-1LLC\s0 and/or its affiliates,
2007\-2011 Baron Schwartz.
.PP
\&\s-1THIS PROGRAM IS PROVIDED \*(L"AS IS\*(R" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation, version 2; \s-1OR\s0 the Perl Artistic License.  On \s-1UNIX\s0 and similar
systems, you can issue `man perlgpl' or `man perlartistic' to read these
licenses.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, \s-1MA\s0  02111\-1307  \s-1USA.\s0
.SH "VERSION"
.IX Header "VERSION"
pt-slave-restart 2.2.17
